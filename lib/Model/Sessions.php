<?php
/**
 * Sessions
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * Sessions Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sessions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sessions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'count' => 'int',
        'max_active' => 'int',
        'session_counter' => 'int',
        'session_create_rate' => 'int',
        'session_expire_rate' => 'int',
        'session_max_alive_time' => 'int',
        'session' => '\TeamCityClient\Model\Session[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'count' => 'int32',
        'max_active' => 'int32',
        'session_counter' => 'int32',
        'session_create_rate' => 'int32',
        'session_expire_rate' => 'int32',
        'session_max_alive_time' => 'int32',
        'session' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count' => 'count',
        'max_active' => 'maxActive',
        'session_counter' => 'sessionCounter',
        'session_create_rate' => 'sessionCreateRate',
        'session_expire_rate' => 'sessionExpireRate',
        'session_max_alive_time' => 'sessionMaxAliveTime',
        'session' => 'session'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count' => 'setCount',
        'max_active' => 'setMaxActive',
        'session_counter' => 'setSessionCounter',
        'session_create_rate' => 'setSessionCreateRate',
        'session_expire_rate' => 'setSessionExpireRate',
        'session_max_alive_time' => 'setSessionMaxAliveTime',
        'session' => 'setSession'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count' => 'getCount',
        'max_active' => 'getMaxActive',
        'session_counter' => 'getSessionCounter',
        'session_create_rate' => 'getSessionCreateRate',
        'session_expire_rate' => 'getSessionExpireRate',
        'session_max_alive_time' => 'getSessionMaxAliveTime',
        'session' => 'getSession'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['max_active'] = isset($data['max_active']) ? $data['max_active'] : null;
        $this->container['session_counter'] = isset($data['session_counter']) ? $data['session_counter'] : null;
        $this->container['session_create_rate'] = isset($data['session_create_rate']) ? $data['session_create_rate'] : null;
        $this->container['session_expire_rate'] = isset($data['session_expire_rate']) ? $data['session_expire_rate'] : null;
        $this->container['session_max_alive_time'] = isset($data['session_max_alive_time']) ? $data['session_max_alive_time'] : null;
        $this->container['session'] = isset($data['session']) ? $data['session'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets max_active
     *
     * @return int
     */
    public function getMaxActive()
    {
        return $this->container['max_active'];
    }

    /**
     * Sets max_active
     *
     * @param int $max_active max_active
     *
     * @return $this
     */
    public function setMaxActive($max_active)
    {
        $this->container['max_active'] = $max_active;

        return $this;
    }

    /**
     * Gets session_counter
     *
     * @return int
     */
    public function getSessionCounter()
    {
        return $this->container['session_counter'];
    }

    /**
     * Sets session_counter
     *
     * @param int $session_counter session_counter
     *
     * @return $this
     */
    public function setSessionCounter($session_counter)
    {
        $this->container['session_counter'] = $session_counter;

        return $this;
    }

    /**
     * Gets session_create_rate
     *
     * @return int
     */
    public function getSessionCreateRate()
    {
        return $this->container['session_create_rate'];
    }

    /**
     * Sets session_create_rate
     *
     * @param int $session_create_rate session_create_rate
     *
     * @return $this
     */
    public function setSessionCreateRate($session_create_rate)
    {
        $this->container['session_create_rate'] = $session_create_rate;

        return $this;
    }

    /**
     * Gets session_expire_rate
     *
     * @return int
     */
    public function getSessionExpireRate()
    {
        return $this->container['session_expire_rate'];
    }

    /**
     * Sets session_expire_rate
     *
     * @param int $session_expire_rate session_expire_rate
     *
     * @return $this
     */
    public function setSessionExpireRate($session_expire_rate)
    {
        $this->container['session_expire_rate'] = $session_expire_rate;

        return $this;
    }

    /**
     * Gets session_max_alive_time
     *
     * @return int
     */
    public function getSessionMaxAliveTime()
    {
        return $this->container['session_max_alive_time'];
    }

    /**
     * Sets session_max_alive_time
     *
     * @param int $session_max_alive_time session_max_alive_time
     *
     * @return $this
     */
    public function setSessionMaxAliveTime($session_max_alive_time)
    {
        $this->container['session_max_alive_time'] = $session_max_alive_time;

        return $this;
    }

    /**
     * Gets session
     *
     * @return \TeamCityClient\Model\Session[]
     */
    public function getSession()
    {
        return $this->container['session'];
    }

    /**
     * Sets session
     *
     * @param \TeamCityClient\Model\Session[] $session session
     *
     * @return $this
     */
    public function setSession($session)
    {
        $this->container['session'] = $session;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


