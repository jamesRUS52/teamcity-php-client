<?php
/**
 * LicensingData
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * LicensingData Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LicensingData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'licensingData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'license_use_exceeded' => 'bool',
        'max_agents' => 'int',
        'unlimited_agents' => 'bool',
        'agents_left' => 'int',
        'max_build_types' => 'int',
        'unlimited_build_types' => 'bool',
        'build_types_left' => 'int',
        'server_license_type' => 'string',
        'server_effective_release_date' => 'string',
        'license_keys' => '\TeamCityClient\Model\LicenseKeys'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'license_use_exceeded' => null,
        'max_agents' => 'int32',
        'unlimited_agents' => null,
        'agents_left' => 'int32',
        'max_build_types' => 'int32',
        'unlimited_build_types' => null,
        'build_types_left' => 'int32',
        'server_license_type' => null,
        'server_effective_release_date' => null,
        'license_keys' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'license_use_exceeded' => 'licenseUseExceeded',
        'max_agents' => 'maxAgents',
        'unlimited_agents' => 'unlimitedAgents',
        'agents_left' => 'agentsLeft',
        'max_build_types' => 'maxBuildTypes',
        'unlimited_build_types' => 'unlimitedBuildTypes',
        'build_types_left' => 'buildTypesLeft',
        'server_license_type' => 'serverLicenseType',
        'server_effective_release_date' => 'serverEffectiveReleaseDate',
        'license_keys' => 'licenseKeys'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'license_use_exceeded' => 'setLicenseUseExceeded',
        'max_agents' => 'setMaxAgents',
        'unlimited_agents' => 'setUnlimitedAgents',
        'agents_left' => 'setAgentsLeft',
        'max_build_types' => 'setMaxBuildTypes',
        'unlimited_build_types' => 'setUnlimitedBuildTypes',
        'build_types_left' => 'setBuildTypesLeft',
        'server_license_type' => 'setServerLicenseType',
        'server_effective_release_date' => 'setServerEffectiveReleaseDate',
        'license_keys' => 'setLicenseKeys'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'license_use_exceeded' => 'getLicenseUseExceeded',
        'max_agents' => 'getMaxAgents',
        'unlimited_agents' => 'getUnlimitedAgents',
        'agents_left' => 'getAgentsLeft',
        'max_build_types' => 'getMaxBuildTypes',
        'unlimited_build_types' => 'getUnlimitedBuildTypes',
        'build_types_left' => 'getBuildTypesLeft',
        'server_license_type' => 'getServerLicenseType',
        'server_effective_release_date' => 'getServerEffectiveReleaseDate',
        'license_keys' => 'getLicenseKeys'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['license_use_exceeded'] = isset($data['license_use_exceeded']) ? $data['license_use_exceeded'] : false;
        $this->container['max_agents'] = isset($data['max_agents']) ? $data['max_agents'] : null;
        $this->container['unlimited_agents'] = isset($data['unlimited_agents']) ? $data['unlimited_agents'] : false;
        $this->container['agents_left'] = isset($data['agents_left']) ? $data['agents_left'] : null;
        $this->container['max_build_types'] = isset($data['max_build_types']) ? $data['max_build_types'] : null;
        $this->container['unlimited_build_types'] = isset($data['unlimited_build_types']) ? $data['unlimited_build_types'] : false;
        $this->container['build_types_left'] = isset($data['build_types_left']) ? $data['build_types_left'] : null;
        $this->container['server_license_type'] = isset($data['server_license_type']) ? $data['server_license_type'] : null;
        $this->container['server_effective_release_date'] = isset($data['server_effective_release_date']) ? $data['server_effective_release_date'] : null;
        $this->container['license_keys'] = isset($data['license_keys']) ? $data['license_keys'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets license_use_exceeded
     *
     * @return bool
     */
    public function getLicenseUseExceeded()
    {
        return $this->container['license_use_exceeded'];
    }

    /**
     * Sets license_use_exceeded
     *
     * @param bool $license_use_exceeded license_use_exceeded
     *
     * @return $this
     */
    public function setLicenseUseExceeded($license_use_exceeded)
    {
        $this->container['license_use_exceeded'] = $license_use_exceeded;

        return $this;
    }

    /**
     * Gets max_agents
     *
     * @return int
     */
    public function getMaxAgents()
    {
        return $this->container['max_agents'];
    }

    /**
     * Sets max_agents
     *
     * @param int $max_agents max_agents
     *
     * @return $this
     */
    public function setMaxAgents($max_agents)
    {
        $this->container['max_agents'] = $max_agents;

        return $this;
    }

    /**
     * Gets unlimited_agents
     *
     * @return bool
     */
    public function getUnlimitedAgents()
    {
        return $this->container['unlimited_agents'];
    }

    /**
     * Sets unlimited_agents
     *
     * @param bool $unlimited_agents unlimited_agents
     *
     * @return $this
     */
    public function setUnlimitedAgents($unlimited_agents)
    {
        $this->container['unlimited_agents'] = $unlimited_agents;

        return $this;
    }

    /**
     * Gets agents_left
     *
     * @return int
     */
    public function getAgentsLeft()
    {
        return $this->container['agents_left'];
    }

    /**
     * Sets agents_left
     *
     * @param int $agents_left agents_left
     *
     * @return $this
     */
    public function setAgentsLeft($agents_left)
    {
        $this->container['agents_left'] = $agents_left;

        return $this;
    }

    /**
     * Gets max_build_types
     *
     * @return int
     */
    public function getMaxBuildTypes()
    {
        return $this->container['max_build_types'];
    }

    /**
     * Sets max_build_types
     *
     * @param int $max_build_types max_build_types
     *
     * @return $this
     */
    public function setMaxBuildTypes($max_build_types)
    {
        $this->container['max_build_types'] = $max_build_types;

        return $this;
    }

    /**
     * Gets unlimited_build_types
     *
     * @return bool
     */
    public function getUnlimitedBuildTypes()
    {
        return $this->container['unlimited_build_types'];
    }

    /**
     * Sets unlimited_build_types
     *
     * @param bool $unlimited_build_types unlimited_build_types
     *
     * @return $this
     */
    public function setUnlimitedBuildTypes($unlimited_build_types)
    {
        $this->container['unlimited_build_types'] = $unlimited_build_types;

        return $this;
    }

    /**
     * Gets build_types_left
     *
     * @return int
     */
    public function getBuildTypesLeft()
    {
        return $this->container['build_types_left'];
    }

    /**
     * Sets build_types_left
     *
     * @param int $build_types_left build_types_left
     *
     * @return $this
     */
    public function setBuildTypesLeft($build_types_left)
    {
        $this->container['build_types_left'] = $build_types_left;

        return $this;
    }

    /**
     * Gets server_license_type
     *
     * @return string
     */
    public function getServerLicenseType()
    {
        return $this->container['server_license_type'];
    }

    /**
     * Sets server_license_type
     *
     * @param string $server_license_type server_license_type
     *
     * @return $this
     */
    public function setServerLicenseType($server_license_type)
    {
        $this->container['server_license_type'] = $server_license_type;

        return $this;
    }

    /**
     * Gets server_effective_release_date
     *
     * @return string
     */
    public function getServerEffectiveReleaseDate()
    {
        return $this->container['server_effective_release_date'];
    }

    /**
     * Sets server_effective_release_date
     *
     * @param string $server_effective_release_date server_effective_release_date
     *
     * @return $this
     */
    public function setServerEffectiveReleaseDate($server_effective_release_date)
    {
        $this->container['server_effective_release_date'] = $server_effective_release_date;

        return $this;
    }

    /**
     * Gets license_keys
     *
     * @return \TeamCityClient\Model\LicenseKeys
     */
    public function getLicenseKeys()
    {
        return $this->container['license_keys'];
    }

    /**
     * Sets license_keys
     *
     * @param \TeamCityClient\Model\LicenseKeys $license_keys license_keys
     *
     * @return $this
     */
    public function setLicenseKeys($license_keys)
    {
        $this->container['license_keys'] = $license_keys;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


