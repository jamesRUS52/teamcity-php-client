<?php
/**
 * VcsRootInstance
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * VcsRootInstance Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VcsRootInstance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'vcs-root-instance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'vcs_root_id' => 'string',
        'vcs_root_internal_id' => 'string',
        'name' => 'string',
        'vcs_name' => 'string',
        'modification_check_interval' => 'int',
        'commit_hook_mode' => 'bool',
        'last_version' => 'string',
        'last_version_internal' => 'string',
        'href' => 'string',
        'vcs_root' => '\TeamCityClient\Model\VcsRoot',
        'status' => '\TeamCityClient\Model\VcsStatus',
        'repository_state' => '\TeamCityClient\Model\RepositoryState',
        'properties' => '\TeamCityClient\Model\Properties',
        'repository_id_strings' => '\TeamCityClient\Model\Items',
        'project_locator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'vcs_root_id' => null,
        'vcs_root_internal_id' => null,
        'name' => null,
        'vcs_name' => null,
        'modification_check_interval' => 'int32',
        'commit_hook_mode' => null,
        'last_version' => null,
        'last_version_internal' => null,
        'href' => null,
        'vcs_root' => null,
        'status' => null,
        'repository_state' => null,
        'properties' => null,
        'repository_id_strings' => null,
        'project_locator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'vcs_root_id' => 'vcs-root-id',
        'vcs_root_internal_id' => 'vcsRootInternalId',
        'name' => 'name',
        'vcs_name' => 'vcsName',
        'modification_check_interval' => 'modificationCheckInterval',
        'commit_hook_mode' => 'commitHookMode',
        'last_version' => 'lastVersion',
        'last_version_internal' => 'lastVersionInternal',
        'href' => 'href',
        'vcs_root' => 'vcs-root',
        'status' => 'status',
        'repository_state' => 'repositoryState',
        'properties' => 'properties',
        'repository_id_strings' => 'repositoryIdStrings',
        'project_locator' => 'projectLocator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'vcs_root_id' => 'setVcsRootId',
        'vcs_root_internal_id' => 'setVcsRootInternalId',
        'name' => 'setName',
        'vcs_name' => 'setVcsName',
        'modification_check_interval' => 'setModificationCheckInterval',
        'commit_hook_mode' => 'setCommitHookMode',
        'last_version' => 'setLastVersion',
        'last_version_internal' => 'setLastVersionInternal',
        'href' => 'setHref',
        'vcs_root' => 'setVcsRoot',
        'status' => 'setStatus',
        'repository_state' => 'setRepositoryState',
        'properties' => 'setProperties',
        'repository_id_strings' => 'setRepositoryIdStrings',
        'project_locator' => 'setProjectLocator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'vcs_root_id' => 'getVcsRootId',
        'vcs_root_internal_id' => 'getVcsRootInternalId',
        'name' => 'getName',
        'vcs_name' => 'getVcsName',
        'modification_check_interval' => 'getModificationCheckInterval',
        'commit_hook_mode' => 'getCommitHookMode',
        'last_version' => 'getLastVersion',
        'last_version_internal' => 'getLastVersionInternal',
        'href' => 'getHref',
        'vcs_root' => 'getVcsRoot',
        'status' => 'getStatus',
        'repository_state' => 'getRepositoryState',
        'properties' => 'getProperties',
        'repository_id_strings' => 'getRepositoryIdStrings',
        'project_locator' => 'getProjectLocator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['vcs_root_id'] = isset($data['vcs_root_id']) ? $data['vcs_root_id'] : null;
        $this->container['vcs_root_internal_id'] = isset($data['vcs_root_internal_id']) ? $data['vcs_root_internal_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['vcs_name'] = isset($data['vcs_name']) ? $data['vcs_name'] : null;
        $this->container['modification_check_interval'] = isset($data['modification_check_interval']) ? $data['modification_check_interval'] : null;
        $this->container['commit_hook_mode'] = isset($data['commit_hook_mode']) ? $data['commit_hook_mode'] : false;
        $this->container['last_version'] = isset($data['last_version']) ? $data['last_version'] : null;
        $this->container['last_version_internal'] = isset($data['last_version_internal']) ? $data['last_version_internal'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['vcs_root'] = isset($data['vcs_root']) ? $data['vcs_root'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['repository_state'] = isset($data['repository_state']) ? $data['repository_state'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['repository_id_strings'] = isset($data['repository_id_strings']) ? $data['repository_id_strings'] : null;
        $this->container['project_locator'] = isset($data['project_locator']) ? $data['project_locator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vcs_root_id
     *
     * @return string
     */
    public function getVcsRootId()
    {
        return $this->container['vcs_root_id'];
    }

    /**
     * Sets vcs_root_id
     *
     * @param string $vcs_root_id vcs_root_id
     *
     * @return $this
     */
    public function setVcsRootId($vcs_root_id)
    {
        $this->container['vcs_root_id'] = $vcs_root_id;

        return $this;
    }

    /**
     * Gets vcs_root_internal_id
     *
     * @return string
     */
    public function getVcsRootInternalId()
    {
        return $this->container['vcs_root_internal_id'];
    }

    /**
     * Sets vcs_root_internal_id
     *
     * @param string $vcs_root_internal_id vcs_root_internal_id
     *
     * @return $this
     */
    public function setVcsRootInternalId($vcs_root_internal_id)
    {
        $this->container['vcs_root_internal_id'] = $vcs_root_internal_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vcs_name
     *
     * @return string
     */
    public function getVcsName()
    {
        return $this->container['vcs_name'];
    }

    /**
     * Sets vcs_name
     *
     * @param string $vcs_name vcs_name
     *
     * @return $this
     */
    public function setVcsName($vcs_name)
    {
        $this->container['vcs_name'] = $vcs_name;

        return $this;
    }

    /**
     * Gets modification_check_interval
     *
     * @return int
     */
    public function getModificationCheckInterval()
    {
        return $this->container['modification_check_interval'];
    }

    /**
     * Sets modification_check_interval
     *
     * @param int $modification_check_interval modification_check_interval
     *
     * @return $this
     */
    public function setModificationCheckInterval($modification_check_interval)
    {
        $this->container['modification_check_interval'] = $modification_check_interval;

        return $this;
    }

    /**
     * Gets commit_hook_mode
     *
     * @return bool
     */
    public function getCommitHookMode()
    {
        return $this->container['commit_hook_mode'];
    }

    /**
     * Sets commit_hook_mode
     *
     * @param bool $commit_hook_mode commit_hook_mode
     *
     * @return $this
     */
    public function setCommitHookMode($commit_hook_mode)
    {
        $this->container['commit_hook_mode'] = $commit_hook_mode;

        return $this;
    }

    /**
     * Gets last_version
     *
     * @return string
     */
    public function getLastVersion()
    {
        return $this->container['last_version'];
    }

    /**
     * Sets last_version
     *
     * @param string $last_version last_version
     *
     * @return $this
     */
    public function setLastVersion($last_version)
    {
        $this->container['last_version'] = $last_version;

        return $this;
    }

    /**
     * Gets last_version_internal
     *
     * @return string
     */
    public function getLastVersionInternal()
    {
        return $this->container['last_version_internal'];
    }

    /**
     * Sets last_version_internal
     *
     * @param string $last_version_internal last_version_internal
     *
     * @return $this
     */
    public function setLastVersionInternal($last_version_internal)
    {
        $this->container['last_version_internal'] = $last_version_internal;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets vcs_root
     *
     * @return \TeamCityClient\Model\VcsRoot
     */
    public function getVcsRoot()
    {
        return $this->container['vcs_root'];
    }

    /**
     * Sets vcs_root
     *
     * @param \TeamCityClient\Model\VcsRoot $vcs_root vcs_root
     *
     * @return $this
     */
    public function setVcsRoot($vcs_root)
    {
        $this->container['vcs_root'] = $vcs_root;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \TeamCityClient\Model\VcsStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \TeamCityClient\Model\VcsStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets repository_state
     *
     * @return \TeamCityClient\Model\RepositoryState
     */
    public function getRepositoryState()
    {
        return $this->container['repository_state'];
    }

    /**
     * Sets repository_state
     *
     * @param \TeamCityClient\Model\RepositoryState $repository_state repository_state
     *
     * @return $this
     */
    public function setRepositoryState($repository_state)
    {
        $this->container['repository_state'] = $repository_state;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \TeamCityClient\Model\Properties
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \TeamCityClient\Model\Properties $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets repository_id_strings
     *
     * @return \TeamCityClient\Model\Items
     */
    public function getRepositoryIdStrings()
    {
        return $this->container['repository_id_strings'];
    }

    /**
     * Sets repository_id_strings
     *
     * @param \TeamCityClient\Model\Items $repository_id_strings repository_id_strings
     *
     * @return $this
     */
    public function setRepositoryIdStrings($repository_id_strings)
    {
        $this->container['repository_id_strings'] = $repository_id_strings;

        return $this;
    }

    /**
     * Gets project_locator
     *
     * @return string
     */
    public function getProjectLocator()
    {
        return $this->container['project_locator'];
    }

    /**
     * Sets project_locator
     *
     * @param string $project_locator project_locator
     *
     * @return $this
     */
    public function setProjectLocator($project_locator)
    {
        $this->container['project_locator'] = $project_locator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


