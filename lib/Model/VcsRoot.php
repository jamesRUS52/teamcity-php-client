<?php
/**
 * VcsRoot
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * VcsRoot Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VcsRoot implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'vcs-root';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'internal_id' => 'string',
        'uuid' => 'string',
        'name' => 'string',
        'vcs_name' => 'string',
        'modification_check_interval' => 'int',
        'href' => 'string',
        'project' => '\TeamCityClient\Model\Project',
        'properties' => '\TeamCityClient\Model\Properties',
        'vcs_root_instances' => '\TeamCityClient\Model\VcsRootInstances',
        'repository_id_strings' => '\TeamCityClient\Model\Items',
        'project_locator' => 'string',
        'locator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'internal_id' => null,
        'uuid' => null,
        'name' => null,
        'vcs_name' => null,
        'modification_check_interval' => 'int32',
        'href' => null,
        'project' => null,
        'properties' => null,
        'vcs_root_instances' => null,
        'repository_id_strings' => null,
        'project_locator' => null,
        'locator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'internal_id' => 'internalId',
        'uuid' => 'uuid',
        'name' => 'name',
        'vcs_name' => 'vcsName',
        'modification_check_interval' => 'modificationCheckInterval',
        'href' => 'href',
        'project' => 'project',
        'properties' => 'properties',
        'vcs_root_instances' => 'vcsRootInstances',
        'repository_id_strings' => 'repositoryIdStrings',
        'project_locator' => 'projectLocator',
        'locator' => 'locator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'internal_id' => 'setInternalId',
        'uuid' => 'setUuid',
        'name' => 'setName',
        'vcs_name' => 'setVcsName',
        'modification_check_interval' => 'setModificationCheckInterval',
        'href' => 'setHref',
        'project' => 'setProject',
        'properties' => 'setProperties',
        'vcs_root_instances' => 'setVcsRootInstances',
        'repository_id_strings' => 'setRepositoryIdStrings',
        'project_locator' => 'setProjectLocator',
        'locator' => 'setLocator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'internal_id' => 'getInternalId',
        'uuid' => 'getUuid',
        'name' => 'getName',
        'vcs_name' => 'getVcsName',
        'modification_check_interval' => 'getModificationCheckInterval',
        'href' => 'getHref',
        'project' => 'getProject',
        'properties' => 'getProperties',
        'vcs_root_instances' => 'getVcsRootInstances',
        'repository_id_strings' => 'getRepositoryIdStrings',
        'project_locator' => 'getProjectLocator',
        'locator' => 'getLocator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['vcs_name'] = isset($data['vcs_name']) ? $data['vcs_name'] : null;
        $this->container['modification_check_interval'] = isset($data['modification_check_interval']) ? $data['modification_check_interval'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['vcs_root_instances'] = isset($data['vcs_root_instances']) ? $data['vcs_root_instances'] : null;
        $this->container['repository_id_strings'] = isset($data['repository_id_strings']) ? $data['repository_id_strings'] : null;
        $this->container['project_locator'] = isset($data['project_locator']) ? $data['project_locator'] : null;
        $this->container['locator'] = isset($data['locator']) ? $data['locator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vcs_name
     *
     * @return string
     */
    public function getVcsName()
    {
        return $this->container['vcs_name'];
    }

    /**
     * Sets vcs_name
     *
     * @param string $vcs_name vcs_name
     *
     * @return $this
     */
    public function setVcsName($vcs_name)
    {
        $this->container['vcs_name'] = $vcs_name;

        return $this;
    }

    /**
     * Gets modification_check_interval
     *
     * @return int
     */
    public function getModificationCheckInterval()
    {
        return $this->container['modification_check_interval'];
    }

    /**
     * Sets modification_check_interval
     *
     * @param int $modification_check_interval modification_check_interval
     *
     * @return $this
     */
    public function setModificationCheckInterval($modification_check_interval)
    {
        $this->container['modification_check_interval'] = $modification_check_interval;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \TeamCityClient\Model\Project
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \TeamCityClient\Model\Project $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \TeamCityClient\Model\Properties
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \TeamCityClient\Model\Properties $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets vcs_root_instances
     *
     * @return \TeamCityClient\Model\VcsRootInstances
     */
    public function getVcsRootInstances()
    {
        return $this->container['vcs_root_instances'];
    }

    /**
     * Sets vcs_root_instances
     *
     * @param \TeamCityClient\Model\VcsRootInstances $vcs_root_instances vcs_root_instances
     *
     * @return $this
     */
    public function setVcsRootInstances($vcs_root_instances)
    {
        $this->container['vcs_root_instances'] = $vcs_root_instances;

        return $this;
    }

    /**
     * Gets repository_id_strings
     *
     * @return \TeamCityClient\Model\Items
     */
    public function getRepositoryIdStrings()
    {
        return $this->container['repository_id_strings'];
    }

    /**
     * Sets repository_id_strings
     *
     * @param \TeamCityClient\Model\Items $repository_id_strings repository_id_strings
     *
     * @return $this
     */
    public function setRepositoryIdStrings($repository_id_strings)
    {
        $this->container['repository_id_strings'] = $repository_id_strings;

        return $this;
    }

    /**
     * Gets project_locator
     *
     * @return string
     */
    public function getProjectLocator()
    {
        return $this->container['project_locator'];
    }

    /**
     * Sets project_locator
     *
     * @param string $project_locator project_locator
     *
     * @return $this
     */
    public function setProjectLocator($project_locator)
    {
        $this->container['project_locator'] = $project_locator;

        return $this;
    }

    /**
     * Gets locator
     *
     * @return string
     */
    public function getLocator()
    {
        return $this->container['locator'];
    }

    /**
     * Sets locator
     *
     * @param string $locator locator
     *
     * @return $this
     */
    public function setLocator($locator)
    {
        $this->container['locator'] = $locator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


