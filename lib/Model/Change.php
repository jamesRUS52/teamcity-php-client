<?php
/**
 * Change
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * Change Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Change implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'change';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'version' => 'string',
        'internal_version' => 'string',
        'username' => 'string',
        'date' => 'string',
        'registration_date' => 'string',
        'personal' => 'bool',
        'href' => 'string',
        'web_url' => 'string',
        'comment' => 'string',
        'user' => '\TeamCityClient\Model\User',
        'files' => '\TeamCityClient\Model\FileChanges',
        'vcs_root_instance' => '\TeamCityClient\Model\VcsRootInstance',
        'parent_changes' => '\TeamCityClient\Model\Changes',
        'parent_revisions' => '\TeamCityClient\Model\Items',
        'attributes' => '\TeamCityClient\Model\Properties',
        'stores_project_settings' => 'bool',
        'locator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'version' => null,
        'internal_version' => null,
        'username' => null,
        'date' => null,
        'registration_date' => null,
        'personal' => null,
        'href' => null,
        'web_url' => null,
        'comment' => null,
        'user' => null,
        'files' => null,
        'vcs_root_instance' => null,
        'parent_changes' => null,
        'parent_revisions' => null,
        'attributes' => null,
        'stores_project_settings' => null,
        'locator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'internal_version' => 'internalVersion',
        'username' => 'username',
        'date' => 'date',
        'registration_date' => 'registrationDate',
        'personal' => 'personal',
        'href' => 'href',
        'web_url' => 'webUrl',
        'comment' => 'comment',
        'user' => 'user',
        'files' => 'files',
        'vcs_root_instance' => 'vcsRootInstance',
        'parent_changes' => 'parentChanges',
        'parent_revisions' => 'parentRevisions',
        'attributes' => 'attributes',
        'stores_project_settings' => 'storesProjectSettings',
        'locator' => 'locator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'internal_version' => 'setInternalVersion',
        'username' => 'setUsername',
        'date' => 'setDate',
        'registration_date' => 'setRegistrationDate',
        'personal' => 'setPersonal',
        'href' => 'setHref',
        'web_url' => 'setWebUrl',
        'comment' => 'setComment',
        'user' => 'setUser',
        'files' => 'setFiles',
        'vcs_root_instance' => 'setVcsRootInstance',
        'parent_changes' => 'setParentChanges',
        'parent_revisions' => 'setParentRevisions',
        'attributes' => 'setAttributes',
        'stores_project_settings' => 'setStoresProjectSettings',
        'locator' => 'setLocator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'internal_version' => 'getInternalVersion',
        'username' => 'getUsername',
        'date' => 'getDate',
        'registration_date' => 'getRegistrationDate',
        'personal' => 'getPersonal',
        'href' => 'getHref',
        'web_url' => 'getWebUrl',
        'comment' => 'getComment',
        'user' => 'getUser',
        'files' => 'getFiles',
        'vcs_root_instance' => 'getVcsRootInstance',
        'parent_changes' => 'getParentChanges',
        'parent_revisions' => 'getParentRevisions',
        'attributes' => 'getAttributes',
        'stores_project_settings' => 'getStoresProjectSettings',
        'locator' => 'getLocator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['internal_version'] = isset($data['internal_version']) ? $data['internal_version'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['personal'] = isset($data['personal']) ? $data['personal'] : false;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['web_url'] = isset($data['web_url']) ? $data['web_url'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['vcs_root_instance'] = isset($data['vcs_root_instance']) ? $data['vcs_root_instance'] : null;
        $this->container['parent_changes'] = isset($data['parent_changes']) ? $data['parent_changes'] : null;
        $this->container['parent_revisions'] = isset($data['parent_revisions']) ? $data['parent_revisions'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['stores_project_settings'] = isset($data['stores_project_settings']) ? $data['stores_project_settings'] : false;
        $this->container['locator'] = isset($data['locator']) ? $data['locator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets internal_version
     *
     * @return string
     */
    public function getInternalVersion()
    {
        return $this->container['internal_version'];
    }

    /**
     * Sets internal_version
     *
     * @param string $internal_version internal_version
     *
     * @return $this
     */
    public function setInternalVersion($internal_version)
    {
        $this->container['internal_version'] = $internal_version;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return string
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param string $registration_date registration_date
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets personal
     *
     * @return bool
     */
    public function getPersonal()
    {
        return $this->container['personal'];
    }

    /**
     * Sets personal
     *
     * @param bool $personal personal
     *
     * @return $this
     */
    public function setPersonal($personal)
    {
        $this->container['personal'] = $personal;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets web_url
     *
     * @return string
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     *
     * @param string $web_url web_url
     *
     * @return $this
     */
    public function setWebUrl($web_url)
    {
        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \TeamCityClient\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \TeamCityClient\Model\User $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \TeamCityClient\Model\FileChanges
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \TeamCityClient\Model\FileChanges $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets vcs_root_instance
     *
     * @return \TeamCityClient\Model\VcsRootInstance
     */
    public function getVcsRootInstance()
    {
        return $this->container['vcs_root_instance'];
    }

    /**
     * Sets vcs_root_instance
     *
     * @param \TeamCityClient\Model\VcsRootInstance $vcs_root_instance vcs_root_instance
     *
     * @return $this
     */
    public function setVcsRootInstance($vcs_root_instance)
    {
        $this->container['vcs_root_instance'] = $vcs_root_instance;

        return $this;
    }

    /**
     * Gets parent_changes
     *
     * @return \TeamCityClient\Model\Changes
     */
    public function getParentChanges()
    {
        return $this->container['parent_changes'];
    }

    /**
     * Sets parent_changes
     *
     * @param \TeamCityClient\Model\Changes $parent_changes parent_changes
     *
     * @return $this
     */
    public function setParentChanges($parent_changes)
    {
        $this->container['parent_changes'] = $parent_changes;

        return $this;
    }

    /**
     * Gets parent_revisions
     *
     * @return \TeamCityClient\Model\Items
     */
    public function getParentRevisions()
    {
        return $this->container['parent_revisions'];
    }

    /**
     * Sets parent_revisions
     *
     * @param \TeamCityClient\Model\Items $parent_revisions parent_revisions
     *
     * @return $this
     */
    public function setParentRevisions($parent_revisions)
    {
        $this->container['parent_revisions'] = $parent_revisions;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \TeamCityClient\Model\Properties
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \TeamCityClient\Model\Properties $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets stores_project_settings
     *
     * @return bool
     */
    public function getStoresProjectSettings()
    {
        return $this->container['stores_project_settings'];
    }

    /**
     * Sets stores_project_settings
     *
     * @param bool $stores_project_settings stores_project_settings
     *
     * @return $this
     */
    public function setStoresProjectSettings($stores_project_settings)
    {
        $this->container['stores_project_settings'] = $stores_project_settings;

        return $this;
    }

    /**
     * Gets locator
     *
     * @return string
     */
    public function getLocator()
    {
        return $this->container['locator'];
    }

    /**
     * Sets locator
     *
     * @param string $locator locator
     *
     * @return $this
     */
    public function setLocator($locator)
    {
        $this->container['locator'] = $locator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


