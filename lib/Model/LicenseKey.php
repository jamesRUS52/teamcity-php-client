<?php
/**
 * LicenseKey
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * LicenseKey Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LicenseKey implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'licenseKey';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'valid' => 'bool',
        'active' => 'bool',
        'expired' => 'bool',
        'obsolete' => 'bool',
        'expiration_date' => 'string',
        'maintenance_end_date' => 'string',
        'type' => 'string',
        'servers' => 'int',
        'agents' => 'int',
        'unlimited_agents' => 'bool',
        'build_types' => 'int',
        'unlimited_build_types' => 'bool',
        'error_details' => 'string',
        'key' => 'string',
        'raw_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'valid' => null,
        'active' => null,
        'expired' => null,
        'obsolete' => null,
        'expiration_date' => null,
        'maintenance_end_date' => null,
        'type' => null,
        'servers' => 'int32',
        'agents' => 'int32',
        'unlimited_agents' => null,
        'build_types' => 'int32',
        'unlimited_build_types' => null,
        'error_details' => null,
        'key' => null,
        'raw_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valid' => 'valid',
        'active' => 'active',
        'expired' => 'expired',
        'obsolete' => 'obsolete',
        'expiration_date' => 'expirationDate',
        'maintenance_end_date' => 'maintenanceEndDate',
        'type' => 'type',
        'servers' => 'servers',
        'agents' => 'agents',
        'unlimited_agents' => 'unlimitedAgents',
        'build_types' => 'buildTypes',
        'unlimited_build_types' => 'unlimitedBuildTypes',
        'error_details' => 'errorDetails',
        'key' => 'key',
        'raw_type' => 'rawType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valid' => 'setValid',
        'active' => 'setActive',
        'expired' => 'setExpired',
        'obsolete' => 'setObsolete',
        'expiration_date' => 'setExpirationDate',
        'maintenance_end_date' => 'setMaintenanceEndDate',
        'type' => 'setType',
        'servers' => 'setServers',
        'agents' => 'setAgents',
        'unlimited_agents' => 'setUnlimitedAgents',
        'build_types' => 'setBuildTypes',
        'unlimited_build_types' => 'setUnlimitedBuildTypes',
        'error_details' => 'setErrorDetails',
        'key' => 'setKey',
        'raw_type' => 'setRawType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valid' => 'getValid',
        'active' => 'getActive',
        'expired' => 'getExpired',
        'obsolete' => 'getObsolete',
        'expiration_date' => 'getExpirationDate',
        'maintenance_end_date' => 'getMaintenanceEndDate',
        'type' => 'getType',
        'servers' => 'getServers',
        'agents' => 'getAgents',
        'unlimited_agents' => 'getUnlimitedAgents',
        'build_types' => 'getBuildTypes',
        'unlimited_build_types' => 'getUnlimitedBuildTypes',
        'error_details' => 'getErrorDetails',
        'key' => 'getKey',
        'raw_type' => 'getRawType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : false;
        $this->container['active'] = isset($data['active']) ? $data['active'] : false;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : false;
        $this->container['obsolete'] = isset($data['obsolete']) ? $data['obsolete'] : false;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['maintenance_end_date'] = isset($data['maintenance_end_date']) ? $data['maintenance_end_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['servers'] = isset($data['servers']) ? $data['servers'] : null;
        $this->container['agents'] = isset($data['agents']) ? $data['agents'] : null;
        $this->container['unlimited_agents'] = isset($data['unlimited_agents']) ? $data['unlimited_agents'] : false;
        $this->container['build_types'] = isset($data['build_types']) ? $data['build_types'] : null;
        $this->container['unlimited_build_types'] = isset($data['unlimited_build_types']) ? $data['unlimited_build_types'] : false;
        $this->container['error_details'] = isset($data['error_details']) ? $data['error_details'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['raw_type'] = isset($data['raw_type']) ? $data['raw_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid valid
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return bool
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param bool $expired expired
     *
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets obsolete
     *
     * @return bool
     */
    public function getObsolete()
    {
        return $this->container['obsolete'];
    }

    /**
     * Sets obsolete
     *
     * @param bool $obsolete obsolete
     *
     * @return $this
     */
    public function setObsolete($obsolete)
    {
        $this->container['obsolete'] = $obsolete;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets maintenance_end_date
     *
     * @return string
     */
    public function getMaintenanceEndDate()
    {
        return $this->container['maintenance_end_date'];
    }

    /**
     * Sets maintenance_end_date
     *
     * @param string $maintenance_end_date maintenance_end_date
     *
     * @return $this
     */
    public function setMaintenanceEndDate($maintenance_end_date)
    {
        $this->container['maintenance_end_date'] = $maintenance_end_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets servers
     *
     * @return int
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     *
     * @param int $servers servers
     *
     * @return $this
     */
    public function setServers($servers)
    {
        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets agents
     *
     * @return int
     */
    public function getAgents()
    {
        return $this->container['agents'];
    }

    /**
     * Sets agents
     *
     * @param int $agents agents
     *
     * @return $this
     */
    public function setAgents($agents)
    {
        $this->container['agents'] = $agents;

        return $this;
    }

    /**
     * Gets unlimited_agents
     *
     * @return bool
     */
    public function getUnlimitedAgents()
    {
        return $this->container['unlimited_agents'];
    }

    /**
     * Sets unlimited_agents
     *
     * @param bool $unlimited_agents unlimited_agents
     *
     * @return $this
     */
    public function setUnlimitedAgents($unlimited_agents)
    {
        $this->container['unlimited_agents'] = $unlimited_agents;

        return $this;
    }

    /**
     * Gets build_types
     *
     * @return int
     */
    public function getBuildTypes()
    {
        return $this->container['build_types'];
    }

    /**
     * Sets build_types
     *
     * @param int $build_types build_types
     *
     * @return $this
     */
    public function setBuildTypes($build_types)
    {
        $this->container['build_types'] = $build_types;

        return $this;
    }

    /**
     * Gets unlimited_build_types
     *
     * @return bool
     */
    public function getUnlimitedBuildTypes()
    {
        return $this->container['unlimited_build_types'];
    }

    /**
     * Sets unlimited_build_types
     *
     * @param bool $unlimited_build_types unlimited_build_types
     *
     * @return $this
     */
    public function setUnlimitedBuildTypes($unlimited_build_types)
    {
        $this->container['unlimited_build_types'] = $unlimited_build_types;

        return $this;
    }

    /**
     * Gets error_details
     *
     * @return string
     */
    public function getErrorDetails()
    {
        return $this->container['error_details'];
    }

    /**
     * Sets error_details
     *
     * @param string $error_details error_details
     *
     * @return $this
     */
    public function setErrorDetails($error_details)
    {
        $this->container['error_details'] = $error_details;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets raw_type
     *
     * @return string
     */
    public function getRawType()
    {
        return $this->container['raw_type'];
    }

    /**
     * Sets raw_type
     *
     * @param string $raw_type raw_type
     *
     * @return $this
     */
    public function setRawType($raw_type)
    {
        $this->container['raw_type'] = $raw_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


