<?php
/**
 * TestOccurrence
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * TestOccurrence Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestOccurrence implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'testOccurrence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'status' => 'string',
        'ignored' => 'bool',
        'duration' => 'int',
        'run_order' => 'string',
        'new_failure' => 'bool',
        'muted' => 'bool',
        'currently_muted' => 'bool',
        'currently_investigated' => 'bool',
        'href' => 'string',
        'ignore_details' => 'string',
        'details' => 'string',
        'test' => '\TeamCityClient\Model\Test',
        'mute' => '\TeamCityClient\Model\Mute',
        'build' => '\TeamCityClient\Model\Build',
        'first_failed' => '\TeamCityClient\Model\TestOccurrence',
        'next_fixed' => '\TeamCityClient\Model\TestOccurrence',
        'invocations' => '\TeamCityClient\Model\TestOccurrences',
        'metadata' => '\TeamCityClient\Model\TestRunMetadata',
        'log_anchor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'status' => null,
        'ignored' => null,
        'duration' => 'int32',
        'run_order' => null,
        'new_failure' => null,
        'muted' => null,
        'currently_muted' => null,
        'currently_investigated' => null,
        'href' => null,
        'ignore_details' => null,
        'details' => null,
        'test' => null,
        'mute' => null,
        'build' => null,
        'first_failed' => null,
        'next_fixed' => null,
        'invocations' => null,
        'metadata' => null,
        'log_anchor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'status' => 'status',
        'ignored' => 'ignored',
        'duration' => 'duration',
        'run_order' => 'runOrder',
        'new_failure' => 'newFailure',
        'muted' => 'muted',
        'currently_muted' => 'currentlyMuted',
        'currently_investigated' => 'currentlyInvestigated',
        'href' => 'href',
        'ignore_details' => 'ignoreDetails',
        'details' => 'details',
        'test' => 'test',
        'mute' => 'mute',
        'build' => 'build',
        'first_failed' => 'firstFailed',
        'next_fixed' => 'nextFixed',
        'invocations' => 'invocations',
        'metadata' => 'metadata',
        'log_anchor' => 'logAnchor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'status' => 'setStatus',
        'ignored' => 'setIgnored',
        'duration' => 'setDuration',
        'run_order' => 'setRunOrder',
        'new_failure' => 'setNewFailure',
        'muted' => 'setMuted',
        'currently_muted' => 'setCurrentlyMuted',
        'currently_investigated' => 'setCurrentlyInvestigated',
        'href' => 'setHref',
        'ignore_details' => 'setIgnoreDetails',
        'details' => 'setDetails',
        'test' => 'setTest',
        'mute' => 'setMute',
        'build' => 'setBuild',
        'first_failed' => 'setFirstFailed',
        'next_fixed' => 'setNextFixed',
        'invocations' => 'setInvocations',
        'metadata' => 'setMetadata',
        'log_anchor' => 'setLogAnchor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'status' => 'getStatus',
        'ignored' => 'getIgnored',
        'duration' => 'getDuration',
        'run_order' => 'getRunOrder',
        'new_failure' => 'getNewFailure',
        'muted' => 'getMuted',
        'currently_muted' => 'getCurrentlyMuted',
        'currently_investigated' => 'getCurrentlyInvestigated',
        'href' => 'getHref',
        'ignore_details' => 'getIgnoreDetails',
        'details' => 'getDetails',
        'test' => 'getTest',
        'mute' => 'getMute',
        'build' => 'getBuild',
        'first_failed' => 'getFirstFailed',
        'next_fixed' => 'getNextFixed',
        'invocations' => 'getInvocations',
        'metadata' => 'getMetadata',
        'log_anchor' => 'getLogAnchor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['ignored'] = isset($data['ignored']) ? $data['ignored'] : false;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['run_order'] = isset($data['run_order']) ? $data['run_order'] : null;
        $this->container['new_failure'] = isset($data['new_failure']) ? $data['new_failure'] : false;
        $this->container['muted'] = isset($data['muted']) ? $data['muted'] : false;
        $this->container['currently_muted'] = isset($data['currently_muted']) ? $data['currently_muted'] : false;
        $this->container['currently_investigated'] = isset($data['currently_investigated']) ? $data['currently_investigated'] : false;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['ignore_details'] = isset($data['ignore_details']) ? $data['ignore_details'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['mute'] = isset($data['mute']) ? $data['mute'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['first_failed'] = isset($data['first_failed']) ? $data['first_failed'] : null;
        $this->container['next_fixed'] = isset($data['next_fixed']) ? $data['next_fixed'] : null;
        $this->container['invocations'] = isset($data['invocations']) ? $data['invocations'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['log_anchor'] = isset($data['log_anchor']) ? $data['log_anchor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ignored
     *
     * @return bool
     */
    public function getIgnored()
    {
        return $this->container['ignored'];
    }

    /**
     * Sets ignored
     *
     * @param bool $ignored ignored
     *
     * @return $this
     */
    public function setIgnored($ignored)
    {
        $this->container['ignored'] = $ignored;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets run_order
     *
     * @return string
     */
    public function getRunOrder()
    {
        return $this->container['run_order'];
    }

    /**
     * Sets run_order
     *
     * @param string $run_order run_order
     *
     * @return $this
     */
    public function setRunOrder($run_order)
    {
        $this->container['run_order'] = $run_order;

        return $this;
    }

    /**
     * Gets new_failure
     *
     * @return bool
     */
    public function getNewFailure()
    {
        return $this->container['new_failure'];
    }

    /**
     * Sets new_failure
     *
     * @param bool $new_failure new_failure
     *
     * @return $this
     */
    public function setNewFailure($new_failure)
    {
        $this->container['new_failure'] = $new_failure;

        return $this;
    }

    /**
     * Gets muted
     *
     * @return bool
     */
    public function getMuted()
    {
        return $this->container['muted'];
    }

    /**
     * Sets muted
     *
     * @param bool $muted muted
     *
     * @return $this
     */
    public function setMuted($muted)
    {
        $this->container['muted'] = $muted;

        return $this;
    }

    /**
     * Gets currently_muted
     *
     * @return bool
     */
    public function getCurrentlyMuted()
    {
        return $this->container['currently_muted'];
    }

    /**
     * Sets currently_muted
     *
     * @param bool $currently_muted currently_muted
     *
     * @return $this
     */
    public function setCurrentlyMuted($currently_muted)
    {
        $this->container['currently_muted'] = $currently_muted;

        return $this;
    }

    /**
     * Gets currently_investigated
     *
     * @return bool
     */
    public function getCurrentlyInvestigated()
    {
        return $this->container['currently_investigated'];
    }

    /**
     * Sets currently_investigated
     *
     * @param bool $currently_investigated currently_investigated
     *
     * @return $this
     */
    public function setCurrentlyInvestigated($currently_investigated)
    {
        $this->container['currently_investigated'] = $currently_investigated;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets ignore_details
     *
     * @return string
     */
    public function getIgnoreDetails()
    {
        return $this->container['ignore_details'];
    }

    /**
     * Sets ignore_details
     *
     * @param string $ignore_details ignore_details
     *
     * @return $this
     */
    public function setIgnoreDetails($ignore_details)
    {
        $this->container['ignore_details'] = $ignore_details;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets test
     *
     * @return \TeamCityClient\Model\Test
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param \TeamCityClient\Model\Test $test test
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets mute
     *
     * @return \TeamCityClient\Model\Mute
     */
    public function getMute()
    {
        return $this->container['mute'];
    }

    /**
     * Sets mute
     *
     * @param \TeamCityClient\Model\Mute $mute mute
     *
     * @return $this
     */
    public function setMute($mute)
    {
        $this->container['mute'] = $mute;

        return $this;
    }

    /**
     * Gets build
     *
     * @return \TeamCityClient\Model\Build
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \TeamCityClient\Model\Build $build build
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets first_failed
     *
     * @return \TeamCityClient\Model\TestOccurrence
     */
    public function getFirstFailed()
    {
        return $this->container['first_failed'];
    }

    /**
     * Sets first_failed
     *
     * @param \TeamCityClient\Model\TestOccurrence $first_failed first_failed
     *
     * @return $this
     */
    public function setFirstFailed($first_failed)
    {
        $this->container['first_failed'] = $first_failed;

        return $this;
    }

    /**
     * Gets next_fixed
     *
     * @return \TeamCityClient\Model\TestOccurrence
     */
    public function getNextFixed()
    {
        return $this->container['next_fixed'];
    }

    /**
     * Sets next_fixed
     *
     * @param \TeamCityClient\Model\TestOccurrence $next_fixed next_fixed
     *
     * @return $this
     */
    public function setNextFixed($next_fixed)
    {
        $this->container['next_fixed'] = $next_fixed;

        return $this;
    }

    /**
     * Gets invocations
     *
     * @return \TeamCityClient\Model\TestOccurrences
     */
    public function getInvocations()
    {
        return $this->container['invocations'];
    }

    /**
     * Sets invocations
     *
     * @param \TeamCityClient\Model\TestOccurrences $invocations invocations
     *
     * @return $this
     */
    public function setInvocations($invocations)
    {
        $this->container['invocations'] = $invocations;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \TeamCityClient\Model\TestRunMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \TeamCityClient\Model\TestRunMetadata $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets log_anchor
     *
     * @return string
     */
    public function getLogAnchor()
    {
        return $this->container['log_anchor'];
    }

    /**
     * Sets log_anchor
     *
     * @param string $log_anchor log_anchor
     *
     * @return $this
     */
    public function setLogAnchor($log_anchor)
    {
        $this->container['log_anchor'] = $log_anchor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


