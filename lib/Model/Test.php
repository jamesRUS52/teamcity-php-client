<?php
/**
 * Test
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * Test Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Test implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'test';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'mutes' => '\TeamCityClient\Model\Mutes',
        'investigations' => '\TeamCityClient\Model\Investigations',
        'test_occurrences' => '\TeamCityClient\Model\TestOccurrences',
        'parsed_test_name' => '\TeamCityClient\Model\ParsedTestName',
        'href' => 'string',
        'locator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'mutes' => null,
        'investigations' => null,
        'test_occurrences' => null,
        'parsed_test_name' => null,
        'href' => null,
        'locator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'mutes' => 'mutes',
        'investigations' => 'investigations',
        'test_occurrences' => 'testOccurrences',
        'parsed_test_name' => 'parsedTestName',
        'href' => 'href',
        'locator' => 'locator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'mutes' => 'setMutes',
        'investigations' => 'setInvestigations',
        'test_occurrences' => 'setTestOccurrences',
        'parsed_test_name' => 'setParsedTestName',
        'href' => 'setHref',
        'locator' => 'setLocator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'mutes' => 'getMutes',
        'investigations' => 'getInvestigations',
        'test_occurrences' => 'getTestOccurrences',
        'parsed_test_name' => 'getParsedTestName',
        'href' => 'getHref',
        'locator' => 'getLocator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['mutes'] = isset($data['mutes']) ? $data['mutes'] : null;
        $this->container['investigations'] = isset($data['investigations']) ? $data['investigations'] : null;
        $this->container['test_occurrences'] = isset($data['test_occurrences']) ? $data['test_occurrences'] : null;
        $this->container['parsed_test_name'] = isset($data['parsed_test_name']) ? $data['parsed_test_name'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['locator'] = isset($data['locator']) ? $data['locator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets mutes
     *
     * @return \TeamCityClient\Model\Mutes
     */
    public function getMutes()
    {
        return $this->container['mutes'];
    }

    /**
     * Sets mutes
     *
     * @param \TeamCityClient\Model\Mutes $mutes mutes
     *
     * @return $this
     */
    public function setMutes($mutes)
    {
        $this->container['mutes'] = $mutes;

        return $this;
    }

    /**
     * Gets investigations
     *
     * @return \TeamCityClient\Model\Investigations
     */
    public function getInvestigations()
    {
        return $this->container['investigations'];
    }

    /**
     * Sets investigations
     *
     * @param \TeamCityClient\Model\Investigations $investigations investigations
     *
     * @return $this
     */
    public function setInvestigations($investigations)
    {
        $this->container['investigations'] = $investigations;

        return $this;
    }

    /**
     * Gets test_occurrences
     *
     * @return \TeamCityClient\Model\TestOccurrences
     */
    public function getTestOccurrences()
    {
        return $this->container['test_occurrences'];
    }

    /**
     * Sets test_occurrences
     *
     * @param \TeamCityClient\Model\TestOccurrences $test_occurrences test_occurrences
     *
     * @return $this
     */
    public function setTestOccurrences($test_occurrences)
    {
        $this->container['test_occurrences'] = $test_occurrences;

        return $this;
    }

    /**
     * Gets parsed_test_name
     *
     * @return \TeamCityClient\Model\ParsedTestName
     */
    public function getParsedTestName()
    {
        return $this->container['parsed_test_name'];
    }

    /**
     * Sets parsed_test_name
     *
     * @param \TeamCityClient\Model\ParsedTestName $parsed_test_name parsed_test_name
     *
     * @return $this
     */
    public function setParsedTestName($parsed_test_name)
    {
        $this->container['parsed_test_name'] = $parsed_test_name;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets locator
     *
     * @return string
     */
    public function getLocator()
    {
        return $this->container['locator'];
    }

    /**
     * Sets locator
     *
     * @param string $locator locator
     *
     * @return $this
     */
    public function setLocator($locator)
    {
        $this->container['locator'] = $locator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


