<?php
/**
 * ParsedTestName
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * ParsedTestName Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ParsedTestName implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ParsedTestName';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'test_package' => 'string',
        'test_suite' => 'string',
        'test_class' => 'string',
        'test_short_name' => 'string',
        'test_name_without_prefix' => 'string',
        'test_method_name' => 'string',
        'test_name_with_parameters' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'test_package' => null,
        'test_suite' => null,
        'test_class' => null,
        'test_short_name' => null,
        'test_name_without_prefix' => null,
        'test_method_name' => null,
        'test_name_with_parameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'test_package' => 'testPackage',
        'test_suite' => 'testSuite',
        'test_class' => 'testClass',
        'test_short_name' => 'testShortName',
        'test_name_without_prefix' => 'testNameWithoutPrefix',
        'test_method_name' => 'testMethodName',
        'test_name_with_parameters' => 'testNameWithParameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'test_package' => 'setTestPackage',
        'test_suite' => 'setTestSuite',
        'test_class' => 'setTestClass',
        'test_short_name' => 'setTestShortName',
        'test_name_without_prefix' => 'setTestNameWithoutPrefix',
        'test_method_name' => 'setTestMethodName',
        'test_name_with_parameters' => 'setTestNameWithParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'test_package' => 'getTestPackage',
        'test_suite' => 'getTestSuite',
        'test_class' => 'getTestClass',
        'test_short_name' => 'getTestShortName',
        'test_name_without_prefix' => 'getTestNameWithoutPrefix',
        'test_method_name' => 'getTestMethodName',
        'test_name_with_parameters' => 'getTestNameWithParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['test_package'] = isset($data['test_package']) ? $data['test_package'] : null;
        $this->container['test_suite'] = isset($data['test_suite']) ? $data['test_suite'] : null;
        $this->container['test_class'] = isset($data['test_class']) ? $data['test_class'] : null;
        $this->container['test_short_name'] = isset($data['test_short_name']) ? $data['test_short_name'] : null;
        $this->container['test_name_without_prefix'] = isset($data['test_name_without_prefix']) ? $data['test_name_without_prefix'] : null;
        $this->container['test_method_name'] = isset($data['test_method_name']) ? $data['test_method_name'] : null;
        $this->container['test_name_with_parameters'] = isset($data['test_name_with_parameters']) ? $data['test_name_with_parameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets test_package
     *
     * @return string
     */
    public function getTestPackage()
    {
        return $this->container['test_package'];
    }

    /**
     * Sets test_package
     *
     * @param string $test_package test_package
     *
     * @return $this
     */
    public function setTestPackage($test_package)
    {
        $this->container['test_package'] = $test_package;

        return $this;
    }

    /**
     * Gets test_suite
     *
     * @return string
     */
    public function getTestSuite()
    {
        return $this->container['test_suite'];
    }

    /**
     * Sets test_suite
     *
     * @param string $test_suite test_suite
     *
     * @return $this
     */
    public function setTestSuite($test_suite)
    {
        $this->container['test_suite'] = $test_suite;

        return $this;
    }

    /**
     * Gets test_class
     *
     * @return string
     */
    public function getTestClass()
    {
        return $this->container['test_class'];
    }

    /**
     * Sets test_class
     *
     * @param string $test_class test_class
     *
     * @return $this
     */
    public function setTestClass($test_class)
    {
        $this->container['test_class'] = $test_class;

        return $this;
    }

    /**
     * Gets test_short_name
     *
     * @return string
     */
    public function getTestShortName()
    {
        return $this->container['test_short_name'];
    }

    /**
     * Sets test_short_name
     *
     * @param string $test_short_name test_short_name
     *
     * @return $this
     */
    public function setTestShortName($test_short_name)
    {
        $this->container['test_short_name'] = $test_short_name;

        return $this;
    }

    /**
     * Gets test_name_without_prefix
     *
     * @return string
     */
    public function getTestNameWithoutPrefix()
    {
        return $this->container['test_name_without_prefix'];
    }

    /**
     * Sets test_name_without_prefix
     *
     * @param string $test_name_without_prefix test_name_without_prefix
     *
     * @return $this
     */
    public function setTestNameWithoutPrefix($test_name_without_prefix)
    {
        $this->container['test_name_without_prefix'] = $test_name_without_prefix;

        return $this;
    }

    /**
     * Gets test_method_name
     *
     * @return string
     */
    public function getTestMethodName()
    {
        return $this->container['test_method_name'];
    }

    /**
     * Sets test_method_name
     *
     * @param string $test_method_name test_method_name
     *
     * @return $this
     */
    public function setTestMethodName($test_method_name)
    {
        $this->container['test_method_name'] = $test_method_name;

        return $this;
    }

    /**
     * Gets test_name_with_parameters
     *
     * @return string
     */
    public function getTestNameWithParameters()
    {
        return $this->container['test_name_with_parameters'];
    }

    /**
     * Sets test_name_with_parameters
     *
     * @param string $test_name_with_parameters test_name_with_parameters
     *
     * @return $this
     */
    public function setTestNameWithParameters($test_name_with_parameters)
    {
        $this->container['test_name_with_parameters'] = $test_name_with_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


