<?php
/**
 * TestOccurrences
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * TestOccurrences Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestOccurrences implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'testOccurrences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'count' => 'int',
        'href' => 'string',
        'next_href' => 'string',
        'prev_href' => 'string',
        'test_occurrence' => '\TeamCityClient\Model\TestOccurrence[]',
        'passed' => 'int',
        'failed' => 'int',
        'new_failed' => 'int',
        'ignored' => 'int',
        'muted' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'count' => 'int32',
        'href' => null,
        'next_href' => null,
        'prev_href' => null,
        'test_occurrence' => null,
        'passed' => 'int32',
        'failed' => 'int32',
        'new_failed' => 'int32',
        'ignored' => 'int32',
        'muted' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count' => 'count',
        'href' => 'href',
        'next_href' => 'nextHref',
        'prev_href' => 'prevHref',
        'test_occurrence' => 'testOccurrence',
        'passed' => 'passed',
        'failed' => 'failed',
        'new_failed' => 'newFailed',
        'ignored' => 'ignored',
        'muted' => 'muted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count' => 'setCount',
        'href' => 'setHref',
        'next_href' => 'setNextHref',
        'prev_href' => 'setPrevHref',
        'test_occurrence' => 'setTestOccurrence',
        'passed' => 'setPassed',
        'failed' => 'setFailed',
        'new_failed' => 'setNewFailed',
        'ignored' => 'setIgnored',
        'muted' => 'setMuted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count' => 'getCount',
        'href' => 'getHref',
        'next_href' => 'getNextHref',
        'prev_href' => 'getPrevHref',
        'test_occurrence' => 'getTestOccurrence',
        'passed' => 'getPassed',
        'failed' => 'getFailed',
        'new_failed' => 'getNewFailed',
        'ignored' => 'getIgnored',
        'muted' => 'getMuted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['next_href'] = isset($data['next_href']) ? $data['next_href'] : null;
        $this->container['prev_href'] = isset($data['prev_href']) ? $data['prev_href'] : null;
        $this->container['test_occurrence'] = isset($data['test_occurrence']) ? $data['test_occurrence'] : null;
        $this->container['passed'] = isset($data['passed']) ? $data['passed'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['new_failed'] = isset($data['new_failed']) ? $data['new_failed'] : null;
        $this->container['ignored'] = isset($data['ignored']) ? $data['ignored'] : null;
        $this->container['muted'] = isset($data['muted']) ? $data['muted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets next_href
     *
     * @return string
     */
    public function getNextHref()
    {
        return $this->container['next_href'];
    }

    /**
     * Sets next_href
     *
     * @param string $next_href next_href
     *
     * @return $this
     */
    public function setNextHref($next_href)
    {
        $this->container['next_href'] = $next_href;

        return $this;
    }

    /**
     * Gets prev_href
     *
     * @return string
     */
    public function getPrevHref()
    {
        return $this->container['prev_href'];
    }

    /**
     * Sets prev_href
     *
     * @param string $prev_href prev_href
     *
     * @return $this
     */
    public function setPrevHref($prev_href)
    {
        $this->container['prev_href'] = $prev_href;

        return $this;
    }

    /**
     * Gets test_occurrence
     *
     * @return \TeamCityClient\Model\TestOccurrence[]
     */
    public function getTestOccurrence()
    {
        return $this->container['test_occurrence'];
    }

    /**
     * Sets test_occurrence
     *
     * @param \TeamCityClient\Model\TestOccurrence[] $test_occurrence test_occurrence
     *
     * @return $this
     */
    public function setTestOccurrence($test_occurrence)
    {
        $this->container['test_occurrence'] = $test_occurrence;

        return $this;
    }

    /**
     * Gets passed
     *
     * @return int
     */
    public function getPassed()
    {
        return $this->container['passed'];
    }

    /**
     * Sets passed
     *
     * @param int $passed passed
     *
     * @return $this
     */
    public function setPassed($passed)
    {
        $this->container['passed'] = $passed;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return int
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param int $failed failed
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets new_failed
     *
     * @return int
     */
    public function getNewFailed()
    {
        return $this->container['new_failed'];
    }

    /**
     * Sets new_failed
     *
     * @param int $new_failed new_failed
     *
     * @return $this
     */
    public function setNewFailed($new_failed)
    {
        $this->container['new_failed'] = $new_failed;

        return $this;
    }

    /**
     * Gets ignored
     *
     * @return int
     */
    public function getIgnored()
    {
        return $this->container['ignored'];
    }

    /**
     * Sets ignored
     *
     * @param int $ignored ignored
     *
     * @return $this
     */
    public function setIgnored($ignored)
    {
        $this->container['ignored'] = $ignored;

        return $this;
    }

    /**
     * Gets muted
     *
     * @return int
     */
    public function getMuted()
    {
        return $this->container['muted'];
    }

    /**
     * Sets muted
     *
     * @param int $muted muted
     *
     * @return $this
     */
    public function setMuted($muted)
    {
        $this->container['muted'] = $muted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


