<?php
/**
 * BackupProcess
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * BackupProcess Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BackupProcess implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BackupProcess';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'brief_info' => '\TeamCityClient\Model\BackupProcessInfo',
        'progress_info' => '\TeamCityClient\Model\ProgressInfo',
        'process_kind' => 'string',
        'exceptions' => '\TeamCityClient\Model\Exception[]',
        'progress_status' => 'string',
        'process_id' => 'int',
        'finished' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'brief_info' => null,
        'progress_info' => null,
        'process_kind' => null,
        'exceptions' => null,
        'progress_status' => null,
        'process_id' => 'int32',
        'finished' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brief_info' => 'briefInfo',
        'progress_info' => 'progressInfo',
        'process_kind' => 'processKind',
        'exceptions' => 'exceptions',
        'progress_status' => 'progressStatus',
        'process_id' => 'processId',
        'finished' => 'finished'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brief_info' => 'setBriefInfo',
        'progress_info' => 'setProgressInfo',
        'process_kind' => 'setProcessKind',
        'exceptions' => 'setExceptions',
        'progress_status' => 'setProgressStatus',
        'process_id' => 'setProcessId',
        'finished' => 'setFinished'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brief_info' => 'getBriefInfo',
        'progress_info' => 'getProgressInfo',
        'process_kind' => 'getProcessKind',
        'exceptions' => 'getExceptions',
        'progress_status' => 'getProgressStatus',
        'process_id' => 'getProcessId',
        'finished' => 'getFinished'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROCESS_KIND_BACKUP = 'Backup';
    const PROCESS_KIND_RESTORE = 'Restore';
    const PROCESS_KIND_CLEANUP = 'Cleanup';
    const PROCESS_KIND_IMPORT = 'Import';
    const PROGRESS_STATUS_RUNNING = 'Running';
    const PROGRESS_STATUS_CANCELLING = 'Cancelling';
    const PROGRESS_STATUS_CANCELLED = 'Cancelled';
    const PROGRESS_STATUS_FINISHED = 'Finished';
    const PROGRESS_STATUS_FAULT = 'Fault';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProcessKindAllowableValues()
    {
        return [
            self::PROCESS_KIND_BACKUP,
            self::PROCESS_KIND_RESTORE,
            self::PROCESS_KIND_CLEANUP,
            self::PROCESS_KIND_IMPORT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProgressStatusAllowableValues()
    {
        return [
            self::PROGRESS_STATUS_RUNNING,
            self::PROGRESS_STATUS_CANCELLING,
            self::PROGRESS_STATUS_CANCELLED,
            self::PROGRESS_STATUS_FINISHED,
            self::PROGRESS_STATUS_FAULT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['brief_info'] = isset($data['brief_info']) ? $data['brief_info'] : null;
        $this->container['progress_info'] = isset($data['progress_info']) ? $data['progress_info'] : null;
        $this->container['process_kind'] = isset($data['process_kind']) ? $data['process_kind'] : null;
        $this->container['exceptions'] = isset($data['exceptions']) ? $data['exceptions'] : null;
        $this->container['progress_status'] = isset($data['progress_status']) ? $data['progress_status'] : null;
        $this->container['process_id'] = isset($data['process_id']) ? $data['process_id'] : null;
        $this->container['finished'] = isset($data['finished']) ? $data['finished'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProcessKindAllowableValues();
        if (!is_null($this->container['process_kind']) && !in_array($this->container['process_kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'process_kind', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProgressStatusAllowableValues();
        if (!is_null($this->container['progress_status']) && !in_array($this->container['progress_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'progress_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brief_info
     *
     * @return \TeamCityClient\Model\BackupProcessInfo
     */
    public function getBriefInfo()
    {
        return $this->container['brief_info'];
    }

    /**
     * Sets brief_info
     *
     * @param \TeamCityClient\Model\BackupProcessInfo $brief_info brief_info
     *
     * @return $this
     */
    public function setBriefInfo($brief_info)
    {
        $this->container['brief_info'] = $brief_info;

        return $this;
    }

    /**
     * Gets progress_info
     *
     * @return \TeamCityClient\Model\ProgressInfo
     */
    public function getProgressInfo()
    {
        return $this->container['progress_info'];
    }

    /**
     * Sets progress_info
     *
     * @param \TeamCityClient\Model\ProgressInfo $progress_info progress_info
     *
     * @return $this
     */
    public function setProgressInfo($progress_info)
    {
        $this->container['progress_info'] = $progress_info;

        return $this;
    }

    /**
     * Gets process_kind
     *
     * @return string
     */
    public function getProcessKind()
    {
        return $this->container['process_kind'];
    }

    /**
     * Sets process_kind
     *
     * @param string $process_kind process_kind
     *
     * @return $this
     */
    public function setProcessKind($process_kind)
    {
        $allowedValues = $this->getProcessKindAllowableValues();
        if (!is_null($process_kind) && !in_array($process_kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'process_kind', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['process_kind'] = $process_kind;

        return $this;
    }

    /**
     * Gets exceptions
     *
     * @return \TeamCityClient\Model\Exception[]
     */
    public function getExceptions()
    {
        return $this->container['exceptions'];
    }

    /**
     * Sets exceptions
     *
     * @param \TeamCityClient\Model\Exception[] $exceptions exceptions
     *
     * @return $this
     */
    public function setExceptions($exceptions)
    {
        $this->container['exceptions'] = $exceptions;

        return $this;
    }

    /**
     * Gets progress_status
     *
     * @return string
     */
    public function getProgressStatus()
    {
        return $this->container['progress_status'];
    }

    /**
     * Sets progress_status
     *
     * @param string $progress_status progress_status
     *
     * @return $this
     */
    public function setProgressStatus($progress_status)
    {
        $allowedValues = $this->getProgressStatusAllowableValues();
        if (!is_null($progress_status) && !in_array($progress_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'progress_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['progress_status'] = $progress_status;

        return $this;
    }

    /**
     * Gets process_id
     *
     * @return int
     */
    public function getProcessId()
    {
        return $this->container['process_id'];
    }

    /**
     * Sets process_id
     *
     * @param int $process_id process_id
     *
     * @return $this
     */
    public function setProcessId($process_id)
    {
        $this->container['process_id'] = $process_id;

        return $this;
    }

    /**
     * Gets finished
     *
     * @return bool
     */
    public function getFinished()
    {
        return $this->container['finished'];
    }

    /**
     * Sets finished
     *
     * @param bool $finished finished
     *
     * @return $this
     */
    public function setFinished($finished)
    {
        $this->container['finished'] = $finished;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


