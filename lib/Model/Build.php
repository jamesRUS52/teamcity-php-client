<?php
/**
 * Build
 *
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Model;

use \ArrayAccess;
use \TeamCityClient\ObjectSerializer;

/**
 * Build Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Build implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'build';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'task_id' => 'int',
        'build_type_id' => 'string',
        'build_type_internal_id' => 'string',
        'number' => 'string',
        'status' => 'string',
        'state' => 'string',
        'running' => 'bool',
        'composite' => 'bool',
        'failed_to_start' => 'bool',
        'personal' => 'bool',
        'percentage_complete' => 'int',
        'branch_name' => 'string',
        'default_branch' => 'bool',
        'unspecified_branch' => 'bool',
        'history' => 'bool',
        'pinned' => 'bool',
        'href' => 'string',
        'web_url' => 'string',
        'queue_position' => 'int',
        'limited_changes_count' => 'int',
        'artifacts_directory' => 'string',
        'links' => '\TeamCityClient\Model\Links',
        'status_text' => 'string',
        'build_type' => '\TeamCityClient\Model\BuildType',
        'comment' => '\TeamCityClient\Model\Comment',
        'tags' => '\TeamCityClient\Model\Tags',
        'pin_info' => '\TeamCityClient\Model\Comment',
        'user' => '\TeamCityClient\Model\User',
        'start_estimate' => 'string',
        'wait_reason' => 'string',
        'running_info' => '\TeamCityClient\Model\ProgressInfo',
        'canceled_info' => '\TeamCityClient\Model\Comment',
        'queued_date' => 'string',
        'start_date' => 'string',
        'finish_date' => 'string',
        'triggered' => '\TeamCityClient\Model\TriggeredBy',
        'last_changes' => '\TeamCityClient\Model\Changes',
        'changes' => '\TeamCityClient\Model\Changes',
        'revisions' => '\TeamCityClient\Model\Revisions',
        'versioned_settings_revision' => '\TeamCityClient\Model\Revision',
        'artifact_dependency_changes' => '\TeamCityClient\Model\BuildChanges',
        'agent' => '\TeamCityClient\Model\Agent',
        'compatible_agents' => '\TeamCityClient\Model\Agents',
        'test_occurrences' => '\TeamCityClient\Model\TestOccurrences',
        'problem_occurrences' => '\TeamCityClient\Model\ProblemOccurrences',
        'artifacts' => '\TeamCityClient\Model\Files',
        'related_issues' => '\TeamCityClient\Model\IssuesUsages',
        'properties' => '\TeamCityClient\Model\Properties',
        'resulting_properties' => '\TeamCityClient\Model\Properties',
        'attributes' => '\TeamCityClient\Model\Entries',
        'statistics' => '\TeamCityClient\Model\Properties',
        'metadata' => '\TeamCityClient\Model\Datas',
        'snapshot_dependencies' => '\TeamCityClient\Model\Builds',
        'artifact_dependencies' => '\TeamCityClient\Model\Builds',
        'custom_artifact_dependencies' => '\TeamCityClient\Model\ArtifactDependencies',
        'settings_hash' => 'string',
        'current_settings_hash' => 'string',
        'modification_id' => 'string',
        'chain_modification_id' => 'string',
        'replacement_ids' => '\TeamCityClient\Model\Items',
        'related' => '\TeamCityClient\Model\Related',
        'triggering_options' => '\TeamCityClient\Model\BuildTriggeringOptions',
        'used_by_other_builds' => 'bool',
        'status_change_comment' => '\TeamCityClient\Model\Comment',
        'locator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'task_id' => 'int64',
        'build_type_id' => null,
        'build_type_internal_id' => null,
        'number' => null,
        'status' => null,
        'state' => null,
        'running' => null,
        'composite' => null,
        'failed_to_start' => null,
        'personal' => null,
        'percentage_complete' => 'int32',
        'branch_name' => null,
        'default_branch' => null,
        'unspecified_branch' => null,
        'history' => null,
        'pinned' => null,
        'href' => null,
        'web_url' => null,
        'queue_position' => 'int32',
        'limited_changes_count' => 'int32',
        'artifacts_directory' => null,
        'links' => null,
        'status_text' => null,
        'build_type' => null,
        'comment' => null,
        'tags' => null,
        'pin_info' => null,
        'user' => null,
        'start_estimate' => null,
        'wait_reason' => null,
        'running_info' => null,
        'canceled_info' => null,
        'queued_date' => null,
        'start_date' => null,
        'finish_date' => null,
        'triggered' => null,
        'last_changes' => null,
        'changes' => null,
        'revisions' => null,
        'versioned_settings_revision' => null,
        'artifact_dependency_changes' => null,
        'agent' => null,
        'compatible_agents' => null,
        'test_occurrences' => null,
        'problem_occurrences' => null,
        'artifacts' => null,
        'related_issues' => null,
        'properties' => null,
        'resulting_properties' => null,
        'attributes' => null,
        'statistics' => null,
        'metadata' => null,
        'snapshot_dependencies' => null,
        'artifact_dependencies' => null,
        'custom_artifact_dependencies' => null,
        'settings_hash' => null,
        'current_settings_hash' => null,
        'modification_id' => null,
        'chain_modification_id' => null,
        'replacement_ids' => null,
        'related' => null,
        'triggering_options' => null,
        'used_by_other_builds' => null,
        'status_change_comment' => null,
        'locator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'task_id' => 'taskId',
        'build_type_id' => 'buildTypeId',
        'build_type_internal_id' => 'buildTypeInternalId',
        'number' => 'number',
        'status' => 'status',
        'state' => 'state',
        'running' => 'running',
        'composite' => 'composite',
        'failed_to_start' => 'failedToStart',
        'personal' => 'personal',
        'percentage_complete' => 'percentageComplete',
        'branch_name' => 'branchName',
        'default_branch' => 'defaultBranch',
        'unspecified_branch' => 'unspecifiedBranch',
        'history' => 'history',
        'pinned' => 'pinned',
        'href' => 'href',
        'web_url' => 'webUrl',
        'queue_position' => 'queuePosition',
        'limited_changes_count' => 'limitedChangesCount',
        'artifacts_directory' => 'artifactsDirectory',
        'links' => 'links',
        'status_text' => 'statusText',
        'build_type' => 'buildType',
        'comment' => 'comment',
        'tags' => 'tags',
        'pin_info' => 'pinInfo',
        'user' => 'user',
        'start_estimate' => 'startEstimate',
        'wait_reason' => 'waitReason',
        'running_info' => 'running-info',
        'canceled_info' => 'canceledInfo',
        'queued_date' => 'queuedDate',
        'start_date' => 'startDate',
        'finish_date' => 'finishDate',
        'triggered' => 'triggered',
        'last_changes' => 'lastChanges',
        'changes' => 'changes',
        'revisions' => 'revisions',
        'versioned_settings_revision' => 'versionedSettingsRevision',
        'artifact_dependency_changes' => 'artifactDependencyChanges',
        'agent' => 'agent',
        'compatible_agents' => 'compatibleAgents',
        'test_occurrences' => 'testOccurrences',
        'problem_occurrences' => 'problemOccurrences',
        'artifacts' => 'artifacts',
        'related_issues' => 'relatedIssues',
        'properties' => 'properties',
        'resulting_properties' => 'resultingProperties',
        'attributes' => 'attributes',
        'statistics' => 'statistics',
        'metadata' => 'metadata',
        'snapshot_dependencies' => 'snapshot-dependencies',
        'artifact_dependencies' => 'artifact-dependencies',
        'custom_artifact_dependencies' => 'custom-artifact-dependencies',
        'settings_hash' => 'settingsHash',
        'current_settings_hash' => 'currentSettingsHash',
        'modification_id' => 'modificationId',
        'chain_modification_id' => 'chainModificationId',
        'replacement_ids' => 'replacementIds',
        'related' => 'related',
        'triggering_options' => 'triggeringOptions',
        'used_by_other_builds' => 'usedByOtherBuilds',
        'status_change_comment' => 'statusChangeComment',
        'locator' => 'locator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'task_id' => 'setTaskId',
        'build_type_id' => 'setBuildTypeId',
        'build_type_internal_id' => 'setBuildTypeInternalId',
        'number' => 'setNumber',
        'status' => 'setStatus',
        'state' => 'setState',
        'running' => 'setRunning',
        'composite' => 'setComposite',
        'failed_to_start' => 'setFailedToStart',
        'personal' => 'setPersonal',
        'percentage_complete' => 'setPercentageComplete',
        'branch_name' => 'setBranchName',
        'default_branch' => 'setDefaultBranch',
        'unspecified_branch' => 'setUnspecifiedBranch',
        'history' => 'setHistory',
        'pinned' => 'setPinned',
        'href' => 'setHref',
        'web_url' => 'setWebUrl',
        'queue_position' => 'setQueuePosition',
        'limited_changes_count' => 'setLimitedChangesCount',
        'artifacts_directory' => 'setArtifactsDirectory',
        'links' => 'setLinks',
        'status_text' => 'setStatusText',
        'build_type' => 'setBuildType',
        'comment' => 'setComment',
        'tags' => 'setTags',
        'pin_info' => 'setPinInfo',
        'user' => 'setUser',
        'start_estimate' => 'setStartEstimate',
        'wait_reason' => 'setWaitReason',
        'running_info' => 'setRunningInfo',
        'canceled_info' => 'setCanceledInfo',
        'queued_date' => 'setQueuedDate',
        'start_date' => 'setStartDate',
        'finish_date' => 'setFinishDate',
        'triggered' => 'setTriggered',
        'last_changes' => 'setLastChanges',
        'changes' => 'setChanges',
        'revisions' => 'setRevisions',
        'versioned_settings_revision' => 'setVersionedSettingsRevision',
        'artifact_dependency_changes' => 'setArtifactDependencyChanges',
        'agent' => 'setAgent',
        'compatible_agents' => 'setCompatibleAgents',
        'test_occurrences' => 'setTestOccurrences',
        'problem_occurrences' => 'setProblemOccurrences',
        'artifacts' => 'setArtifacts',
        'related_issues' => 'setRelatedIssues',
        'properties' => 'setProperties',
        'resulting_properties' => 'setResultingProperties',
        'attributes' => 'setAttributes',
        'statistics' => 'setStatistics',
        'metadata' => 'setMetadata',
        'snapshot_dependencies' => 'setSnapshotDependencies',
        'artifact_dependencies' => 'setArtifactDependencies',
        'custom_artifact_dependencies' => 'setCustomArtifactDependencies',
        'settings_hash' => 'setSettingsHash',
        'current_settings_hash' => 'setCurrentSettingsHash',
        'modification_id' => 'setModificationId',
        'chain_modification_id' => 'setChainModificationId',
        'replacement_ids' => 'setReplacementIds',
        'related' => 'setRelated',
        'triggering_options' => 'setTriggeringOptions',
        'used_by_other_builds' => 'setUsedByOtherBuilds',
        'status_change_comment' => 'setStatusChangeComment',
        'locator' => 'setLocator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'task_id' => 'getTaskId',
        'build_type_id' => 'getBuildTypeId',
        'build_type_internal_id' => 'getBuildTypeInternalId',
        'number' => 'getNumber',
        'status' => 'getStatus',
        'state' => 'getState',
        'running' => 'getRunning',
        'composite' => 'getComposite',
        'failed_to_start' => 'getFailedToStart',
        'personal' => 'getPersonal',
        'percentage_complete' => 'getPercentageComplete',
        'branch_name' => 'getBranchName',
        'default_branch' => 'getDefaultBranch',
        'unspecified_branch' => 'getUnspecifiedBranch',
        'history' => 'getHistory',
        'pinned' => 'getPinned',
        'href' => 'getHref',
        'web_url' => 'getWebUrl',
        'queue_position' => 'getQueuePosition',
        'limited_changes_count' => 'getLimitedChangesCount',
        'artifacts_directory' => 'getArtifactsDirectory',
        'links' => 'getLinks',
        'status_text' => 'getStatusText',
        'build_type' => 'getBuildType',
        'comment' => 'getComment',
        'tags' => 'getTags',
        'pin_info' => 'getPinInfo',
        'user' => 'getUser',
        'start_estimate' => 'getStartEstimate',
        'wait_reason' => 'getWaitReason',
        'running_info' => 'getRunningInfo',
        'canceled_info' => 'getCanceledInfo',
        'queued_date' => 'getQueuedDate',
        'start_date' => 'getStartDate',
        'finish_date' => 'getFinishDate',
        'triggered' => 'getTriggered',
        'last_changes' => 'getLastChanges',
        'changes' => 'getChanges',
        'revisions' => 'getRevisions',
        'versioned_settings_revision' => 'getVersionedSettingsRevision',
        'artifact_dependency_changes' => 'getArtifactDependencyChanges',
        'agent' => 'getAgent',
        'compatible_agents' => 'getCompatibleAgents',
        'test_occurrences' => 'getTestOccurrences',
        'problem_occurrences' => 'getProblemOccurrences',
        'artifacts' => 'getArtifacts',
        'related_issues' => 'getRelatedIssues',
        'properties' => 'getProperties',
        'resulting_properties' => 'getResultingProperties',
        'attributes' => 'getAttributes',
        'statistics' => 'getStatistics',
        'metadata' => 'getMetadata',
        'snapshot_dependencies' => 'getSnapshotDependencies',
        'artifact_dependencies' => 'getArtifactDependencies',
        'custom_artifact_dependencies' => 'getCustomArtifactDependencies',
        'settings_hash' => 'getSettingsHash',
        'current_settings_hash' => 'getCurrentSettingsHash',
        'modification_id' => 'getModificationId',
        'chain_modification_id' => 'getChainModificationId',
        'replacement_ids' => 'getReplacementIds',
        'related' => 'getRelated',
        'triggering_options' => 'getTriggeringOptions',
        'used_by_other_builds' => 'getUsedByOtherBuilds',
        'status_change_comment' => 'getStatusChangeComment',
        'locator' => 'getLocator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['build_type_id'] = isset($data['build_type_id']) ? $data['build_type_id'] : null;
        $this->container['build_type_internal_id'] = isset($data['build_type_internal_id']) ? $data['build_type_internal_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['running'] = isset($data['running']) ? $data['running'] : false;
        $this->container['composite'] = isset($data['composite']) ? $data['composite'] : false;
        $this->container['failed_to_start'] = isset($data['failed_to_start']) ? $data['failed_to_start'] : false;
        $this->container['personal'] = isset($data['personal']) ? $data['personal'] : false;
        $this->container['percentage_complete'] = isset($data['percentage_complete']) ? $data['percentage_complete'] : null;
        $this->container['branch_name'] = isset($data['branch_name']) ? $data['branch_name'] : null;
        $this->container['default_branch'] = isset($data['default_branch']) ? $data['default_branch'] : false;
        $this->container['unspecified_branch'] = isset($data['unspecified_branch']) ? $data['unspecified_branch'] : false;
        $this->container['history'] = isset($data['history']) ? $data['history'] : false;
        $this->container['pinned'] = isset($data['pinned']) ? $data['pinned'] : false;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['web_url'] = isset($data['web_url']) ? $data['web_url'] : null;
        $this->container['queue_position'] = isset($data['queue_position']) ? $data['queue_position'] : null;
        $this->container['limited_changes_count'] = isset($data['limited_changes_count']) ? $data['limited_changes_count'] : null;
        $this->container['artifacts_directory'] = isset($data['artifacts_directory']) ? $data['artifacts_directory'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['status_text'] = isset($data['status_text']) ? $data['status_text'] : null;
        $this->container['build_type'] = isset($data['build_type']) ? $data['build_type'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['pin_info'] = isset($data['pin_info']) ? $data['pin_info'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['start_estimate'] = isset($data['start_estimate']) ? $data['start_estimate'] : null;
        $this->container['wait_reason'] = isset($data['wait_reason']) ? $data['wait_reason'] : null;
        $this->container['running_info'] = isset($data['running_info']) ? $data['running_info'] : null;
        $this->container['canceled_info'] = isset($data['canceled_info']) ? $data['canceled_info'] : null;
        $this->container['queued_date'] = isset($data['queued_date']) ? $data['queued_date'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['finish_date'] = isset($data['finish_date']) ? $data['finish_date'] : null;
        $this->container['triggered'] = isset($data['triggered']) ? $data['triggered'] : null;
        $this->container['last_changes'] = isset($data['last_changes']) ? $data['last_changes'] : null;
        $this->container['changes'] = isset($data['changes']) ? $data['changes'] : null;
        $this->container['revisions'] = isset($data['revisions']) ? $data['revisions'] : null;
        $this->container['versioned_settings_revision'] = isset($data['versioned_settings_revision']) ? $data['versioned_settings_revision'] : null;
        $this->container['artifact_dependency_changes'] = isset($data['artifact_dependency_changes']) ? $data['artifact_dependency_changes'] : null;
        $this->container['agent'] = isset($data['agent']) ? $data['agent'] : null;
        $this->container['compatible_agents'] = isset($data['compatible_agents']) ? $data['compatible_agents'] : null;
        $this->container['test_occurrences'] = isset($data['test_occurrences']) ? $data['test_occurrences'] : null;
        $this->container['problem_occurrences'] = isset($data['problem_occurrences']) ? $data['problem_occurrences'] : null;
        $this->container['artifacts'] = isset($data['artifacts']) ? $data['artifacts'] : null;
        $this->container['related_issues'] = isset($data['related_issues']) ? $data['related_issues'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['resulting_properties'] = isset($data['resulting_properties']) ? $data['resulting_properties'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['snapshot_dependencies'] = isset($data['snapshot_dependencies']) ? $data['snapshot_dependencies'] : null;
        $this->container['artifact_dependencies'] = isset($data['artifact_dependencies']) ? $data['artifact_dependencies'] : null;
        $this->container['custom_artifact_dependencies'] = isset($data['custom_artifact_dependencies']) ? $data['custom_artifact_dependencies'] : null;
        $this->container['settings_hash'] = isset($data['settings_hash']) ? $data['settings_hash'] : null;
        $this->container['current_settings_hash'] = isset($data['current_settings_hash']) ? $data['current_settings_hash'] : null;
        $this->container['modification_id'] = isset($data['modification_id']) ? $data['modification_id'] : null;
        $this->container['chain_modification_id'] = isset($data['chain_modification_id']) ? $data['chain_modification_id'] : null;
        $this->container['replacement_ids'] = isset($data['replacement_ids']) ? $data['replacement_ids'] : null;
        $this->container['related'] = isset($data['related']) ? $data['related'] : null;
        $this->container['triggering_options'] = isset($data['triggering_options']) ? $data['triggering_options'] : null;
        $this->container['used_by_other_builds'] = isset($data['used_by_other_builds']) ? $data['used_by_other_builds'] : false;
        $this->container['status_change_comment'] = isset($data['status_change_comment']) ? $data['status_change_comment'] : null;
        $this->container['locator'] = isset($data['locator']) ? $data['locator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return int
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param int $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets build_type_id
     *
     * @return string
     */
    public function getBuildTypeId()
    {
        return $this->container['build_type_id'];
    }

    /**
     * Sets build_type_id
     *
     * @param string $build_type_id build_type_id
     *
     * @return $this
     */
    public function setBuildTypeId($build_type_id)
    {
        $this->container['build_type_id'] = $build_type_id;

        return $this;
    }

    /**
     * Gets build_type_internal_id
     *
     * @return string
     */
    public function getBuildTypeInternalId()
    {
        return $this->container['build_type_internal_id'];
    }

    /**
     * Sets build_type_internal_id
     *
     * @param string $build_type_internal_id build_type_internal_id
     *
     * @return $this
     */
    public function setBuildTypeInternalId($build_type_internal_id)
    {
        $this->container['build_type_internal_id'] = $build_type_internal_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets running
     *
     * @return bool
     */
    public function getRunning()
    {
        return $this->container['running'];
    }

    /**
     * Sets running
     *
     * @param bool $running running
     *
     * @return $this
     */
    public function setRunning($running)
    {
        $this->container['running'] = $running;

        return $this;
    }

    /**
     * Gets composite
     *
     * @return bool
     */
    public function getComposite()
    {
        return $this->container['composite'];
    }

    /**
     * Sets composite
     *
     * @param bool $composite composite
     *
     * @return $this
     */
    public function setComposite($composite)
    {
        $this->container['composite'] = $composite;

        return $this;
    }

    /**
     * Gets failed_to_start
     *
     * @return bool
     */
    public function getFailedToStart()
    {
        return $this->container['failed_to_start'];
    }

    /**
     * Sets failed_to_start
     *
     * @param bool $failed_to_start failed_to_start
     *
     * @return $this
     */
    public function setFailedToStart($failed_to_start)
    {
        $this->container['failed_to_start'] = $failed_to_start;

        return $this;
    }

    /**
     * Gets personal
     *
     * @return bool
     */
    public function getPersonal()
    {
        return $this->container['personal'];
    }

    /**
     * Sets personal
     *
     * @param bool $personal personal
     *
     * @return $this
     */
    public function setPersonal($personal)
    {
        $this->container['personal'] = $personal;

        return $this;
    }

    /**
     * Gets percentage_complete
     *
     * @return int
     */
    public function getPercentageComplete()
    {
        return $this->container['percentage_complete'];
    }

    /**
     * Sets percentage_complete
     *
     * @param int $percentage_complete percentage_complete
     *
     * @return $this
     */
    public function setPercentageComplete($percentage_complete)
    {
        $this->container['percentage_complete'] = $percentage_complete;

        return $this;
    }

    /**
     * Gets branch_name
     *
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branch_name'];
    }

    /**
     * Sets branch_name
     *
     * @param string $branch_name branch_name
     *
     * @return $this
     */
    public function setBranchName($branch_name)
    {
        $this->container['branch_name'] = $branch_name;

        return $this;
    }

    /**
     * Gets default_branch
     *
     * @return bool
     */
    public function getDefaultBranch()
    {
        return $this->container['default_branch'];
    }

    /**
     * Sets default_branch
     *
     * @param bool $default_branch default_branch
     *
     * @return $this
     */
    public function setDefaultBranch($default_branch)
    {
        $this->container['default_branch'] = $default_branch;

        return $this;
    }

    /**
     * Gets unspecified_branch
     *
     * @return bool
     */
    public function getUnspecifiedBranch()
    {
        return $this->container['unspecified_branch'];
    }

    /**
     * Sets unspecified_branch
     *
     * @param bool $unspecified_branch unspecified_branch
     *
     * @return $this
     */
    public function setUnspecifiedBranch($unspecified_branch)
    {
        $this->container['unspecified_branch'] = $unspecified_branch;

        return $this;
    }

    /**
     * Gets history
     *
     * @return bool
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param bool $history history
     *
     * @return $this
     */
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets pinned
     *
     * @return bool
     */
    public function getPinned()
    {
        return $this->container['pinned'];
    }

    /**
     * Sets pinned
     *
     * @param bool $pinned pinned
     *
     * @return $this
     */
    public function setPinned($pinned)
    {
        $this->container['pinned'] = $pinned;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets web_url
     *
     * @return string
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     *
     * @param string $web_url web_url
     *
     * @return $this
     */
    public function setWebUrl($web_url)
    {
        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets queue_position
     *
     * @return int
     */
    public function getQueuePosition()
    {
        return $this->container['queue_position'];
    }

    /**
     * Sets queue_position
     *
     * @param int $queue_position queue_position
     *
     * @return $this
     */
    public function setQueuePosition($queue_position)
    {
        $this->container['queue_position'] = $queue_position;

        return $this;
    }

    /**
     * Gets limited_changes_count
     *
     * @return int
     */
    public function getLimitedChangesCount()
    {
        return $this->container['limited_changes_count'];
    }

    /**
     * Sets limited_changes_count
     *
     * @param int $limited_changes_count limited_changes_count
     *
     * @return $this
     */
    public function setLimitedChangesCount($limited_changes_count)
    {
        $this->container['limited_changes_count'] = $limited_changes_count;

        return $this;
    }

    /**
     * Gets artifacts_directory
     *
     * @return string
     */
    public function getArtifactsDirectory()
    {
        return $this->container['artifacts_directory'];
    }

    /**
     * Sets artifacts_directory
     *
     * @param string $artifacts_directory artifacts_directory
     *
     * @return $this
     */
    public function setArtifactsDirectory($artifacts_directory)
    {
        $this->container['artifacts_directory'] = $artifacts_directory;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \TeamCityClient\Model\Links
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \TeamCityClient\Model\Links $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets status_text
     *
     * @return string
     */
    public function getStatusText()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     *
     * @param string $status_text status_text
     *
     * @return $this
     */
    public function setStatusText($status_text)
    {
        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets build_type
     *
     * @return \TeamCityClient\Model\BuildType
     */
    public function getBuildType()
    {
        return $this->container['build_type'];
    }

    /**
     * Sets build_type
     *
     * @param \TeamCityClient\Model\BuildType $build_type build_type
     *
     * @return $this
     */
    public function setBuildType($build_type)
    {
        $this->container['build_type'] = $build_type;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return \TeamCityClient\Model\Comment
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param \TeamCityClient\Model\Comment $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \TeamCityClient\Model\Tags
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \TeamCityClient\Model\Tags $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets pin_info
     *
     * @return \TeamCityClient\Model\Comment
     */
    public function getPinInfo()
    {
        return $this->container['pin_info'];
    }

    /**
     * Sets pin_info
     *
     * @param \TeamCityClient\Model\Comment $pin_info pin_info
     *
     * @return $this
     */
    public function setPinInfo($pin_info)
    {
        $this->container['pin_info'] = $pin_info;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \TeamCityClient\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \TeamCityClient\Model\User $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets start_estimate
     *
     * @return string
     */
    public function getStartEstimate()
    {
        return $this->container['start_estimate'];
    }

    /**
     * Sets start_estimate
     *
     * @param string $start_estimate start_estimate
     *
     * @return $this
     */
    public function setStartEstimate($start_estimate)
    {
        $this->container['start_estimate'] = $start_estimate;

        return $this;
    }

    /**
     * Gets wait_reason
     *
     * @return string
     */
    public function getWaitReason()
    {
        return $this->container['wait_reason'];
    }

    /**
     * Sets wait_reason
     *
     * @param string $wait_reason wait_reason
     *
     * @return $this
     */
    public function setWaitReason($wait_reason)
    {
        $this->container['wait_reason'] = $wait_reason;

        return $this;
    }

    /**
     * Gets running_info
     *
     * @return \TeamCityClient\Model\ProgressInfo
     */
    public function getRunningInfo()
    {
        return $this->container['running_info'];
    }

    /**
     * Sets running_info
     *
     * @param \TeamCityClient\Model\ProgressInfo $running_info running_info
     *
     * @return $this
     */
    public function setRunningInfo($running_info)
    {
        $this->container['running_info'] = $running_info;

        return $this;
    }

    /**
     * Gets canceled_info
     *
     * @return \TeamCityClient\Model\Comment
     */
    public function getCanceledInfo()
    {
        return $this->container['canceled_info'];
    }

    /**
     * Sets canceled_info
     *
     * @param \TeamCityClient\Model\Comment $canceled_info canceled_info
     *
     * @return $this
     */
    public function setCanceledInfo($canceled_info)
    {
        $this->container['canceled_info'] = $canceled_info;

        return $this;
    }

    /**
     * Gets queued_date
     *
     * @return string
     */
    public function getQueuedDate()
    {
        return $this->container['queued_date'];
    }

    /**
     * Sets queued_date
     *
     * @param string $queued_date queued_date
     *
     * @return $this
     */
    public function setQueuedDate($queued_date)
    {
        $this->container['queued_date'] = $queued_date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets finish_date
     *
     * @return string
     */
    public function getFinishDate()
    {
        return $this->container['finish_date'];
    }

    /**
     * Sets finish_date
     *
     * @param string $finish_date finish_date
     *
     * @return $this
     */
    public function setFinishDate($finish_date)
    {
        $this->container['finish_date'] = $finish_date;

        return $this;
    }

    /**
     * Gets triggered
     *
     * @return \TeamCityClient\Model\TriggeredBy
     */
    public function getTriggered()
    {
        return $this->container['triggered'];
    }

    /**
     * Sets triggered
     *
     * @param \TeamCityClient\Model\TriggeredBy $triggered triggered
     *
     * @return $this
     */
    public function setTriggered($triggered)
    {
        $this->container['triggered'] = $triggered;

        return $this;
    }

    /**
     * Gets last_changes
     *
     * @return \TeamCityClient\Model\Changes
     */
    public function getLastChanges()
    {
        return $this->container['last_changes'];
    }

    /**
     * Sets last_changes
     *
     * @param \TeamCityClient\Model\Changes $last_changes last_changes
     *
     * @return $this
     */
    public function setLastChanges($last_changes)
    {
        $this->container['last_changes'] = $last_changes;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return \TeamCityClient\Model\Changes
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     *
     * @param \TeamCityClient\Model\Changes $changes changes
     *
     * @return $this
     */
    public function setChanges($changes)
    {
        $this->container['changes'] = $changes;

        return $this;
    }

    /**
     * Gets revisions
     *
     * @return \TeamCityClient\Model\Revisions
     */
    public function getRevisions()
    {
        return $this->container['revisions'];
    }

    /**
     * Sets revisions
     *
     * @param \TeamCityClient\Model\Revisions $revisions revisions
     *
     * @return $this
     */
    public function setRevisions($revisions)
    {
        $this->container['revisions'] = $revisions;

        return $this;
    }

    /**
     * Gets versioned_settings_revision
     *
     * @return \TeamCityClient\Model\Revision
     */
    public function getVersionedSettingsRevision()
    {
        return $this->container['versioned_settings_revision'];
    }

    /**
     * Sets versioned_settings_revision
     *
     * @param \TeamCityClient\Model\Revision $versioned_settings_revision versioned_settings_revision
     *
     * @return $this
     */
    public function setVersionedSettingsRevision($versioned_settings_revision)
    {
        $this->container['versioned_settings_revision'] = $versioned_settings_revision;

        return $this;
    }

    /**
     * Gets artifact_dependency_changes
     *
     * @return \TeamCityClient\Model\BuildChanges
     */
    public function getArtifactDependencyChanges()
    {
        return $this->container['artifact_dependency_changes'];
    }

    /**
     * Sets artifact_dependency_changes
     *
     * @param \TeamCityClient\Model\BuildChanges $artifact_dependency_changes artifact_dependency_changes
     *
     * @return $this
     */
    public function setArtifactDependencyChanges($artifact_dependency_changes)
    {
        $this->container['artifact_dependency_changes'] = $artifact_dependency_changes;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \TeamCityClient\Model\Agent
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \TeamCityClient\Model\Agent $agent agent
     *
     * @return $this
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets compatible_agents
     *
     * @return \TeamCityClient\Model\Agents
     */
    public function getCompatibleAgents()
    {
        return $this->container['compatible_agents'];
    }

    /**
     * Sets compatible_agents
     *
     * @param \TeamCityClient\Model\Agents $compatible_agents compatible_agents
     *
     * @return $this
     */
    public function setCompatibleAgents($compatible_agents)
    {
        $this->container['compatible_agents'] = $compatible_agents;

        return $this;
    }

    /**
     * Gets test_occurrences
     *
     * @return \TeamCityClient\Model\TestOccurrences
     */
    public function getTestOccurrences()
    {
        return $this->container['test_occurrences'];
    }

    /**
     * Sets test_occurrences
     *
     * @param \TeamCityClient\Model\TestOccurrences $test_occurrences test_occurrences
     *
     * @return $this
     */
    public function setTestOccurrences($test_occurrences)
    {
        $this->container['test_occurrences'] = $test_occurrences;

        return $this;
    }

    /**
     * Gets problem_occurrences
     *
     * @return \TeamCityClient\Model\ProblemOccurrences
     */
    public function getProblemOccurrences()
    {
        return $this->container['problem_occurrences'];
    }

    /**
     * Sets problem_occurrences
     *
     * @param \TeamCityClient\Model\ProblemOccurrences $problem_occurrences problem_occurrences
     *
     * @return $this
     */
    public function setProblemOccurrences($problem_occurrences)
    {
        $this->container['problem_occurrences'] = $problem_occurrences;

        return $this;
    }

    /**
     * Gets artifacts
     *
     * @return \TeamCityClient\Model\Files
     */
    public function getArtifacts()
    {
        return $this->container['artifacts'];
    }

    /**
     * Sets artifacts
     *
     * @param \TeamCityClient\Model\Files $artifacts artifacts
     *
     * @return $this
     */
    public function setArtifacts($artifacts)
    {
        $this->container['artifacts'] = $artifacts;

        return $this;
    }

    /**
     * Gets related_issues
     *
     * @return \TeamCityClient\Model\IssuesUsages
     */
    public function getRelatedIssues()
    {
        return $this->container['related_issues'];
    }

    /**
     * Sets related_issues
     *
     * @param \TeamCityClient\Model\IssuesUsages $related_issues related_issues
     *
     * @return $this
     */
    public function setRelatedIssues($related_issues)
    {
        $this->container['related_issues'] = $related_issues;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \TeamCityClient\Model\Properties
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \TeamCityClient\Model\Properties $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets resulting_properties
     *
     * @return \TeamCityClient\Model\Properties
     */
    public function getResultingProperties()
    {
        return $this->container['resulting_properties'];
    }

    /**
     * Sets resulting_properties
     *
     * @param \TeamCityClient\Model\Properties $resulting_properties resulting_properties
     *
     * @return $this
     */
    public function setResultingProperties($resulting_properties)
    {
        $this->container['resulting_properties'] = $resulting_properties;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \TeamCityClient\Model\Entries
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \TeamCityClient\Model\Entries $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \TeamCityClient\Model\Properties
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \TeamCityClient\Model\Properties $statistics statistics
     *
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \TeamCityClient\Model\Datas
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \TeamCityClient\Model\Datas $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets snapshot_dependencies
     *
     * @return \TeamCityClient\Model\Builds
     */
    public function getSnapshotDependencies()
    {
        return $this->container['snapshot_dependencies'];
    }

    /**
     * Sets snapshot_dependencies
     *
     * @param \TeamCityClient\Model\Builds $snapshot_dependencies snapshot_dependencies
     *
     * @return $this
     */
    public function setSnapshotDependencies($snapshot_dependencies)
    {
        $this->container['snapshot_dependencies'] = $snapshot_dependencies;

        return $this;
    }

    /**
     * Gets artifact_dependencies
     *
     * @return \TeamCityClient\Model\Builds
     */
    public function getArtifactDependencies()
    {
        return $this->container['artifact_dependencies'];
    }

    /**
     * Sets artifact_dependencies
     *
     * @param \TeamCityClient\Model\Builds $artifact_dependencies artifact_dependencies
     *
     * @return $this
     */
    public function setArtifactDependencies($artifact_dependencies)
    {
        $this->container['artifact_dependencies'] = $artifact_dependencies;

        return $this;
    }

    /**
     * Gets custom_artifact_dependencies
     *
     * @return \TeamCityClient\Model\ArtifactDependencies
     */
    public function getCustomArtifactDependencies()
    {
        return $this->container['custom_artifact_dependencies'];
    }

    /**
     * Sets custom_artifact_dependencies
     *
     * @param \TeamCityClient\Model\ArtifactDependencies $custom_artifact_dependencies custom_artifact_dependencies
     *
     * @return $this
     */
    public function setCustomArtifactDependencies($custom_artifact_dependencies)
    {
        $this->container['custom_artifact_dependencies'] = $custom_artifact_dependencies;

        return $this;
    }

    /**
     * Gets settings_hash
     *
     * @return string
     */
    public function getSettingsHash()
    {
        return $this->container['settings_hash'];
    }

    /**
     * Sets settings_hash
     *
     * @param string $settings_hash settings_hash
     *
     * @return $this
     */
    public function setSettingsHash($settings_hash)
    {
        $this->container['settings_hash'] = $settings_hash;

        return $this;
    }

    /**
     * Gets current_settings_hash
     *
     * @return string
     */
    public function getCurrentSettingsHash()
    {
        return $this->container['current_settings_hash'];
    }

    /**
     * Sets current_settings_hash
     *
     * @param string $current_settings_hash current_settings_hash
     *
     * @return $this
     */
    public function setCurrentSettingsHash($current_settings_hash)
    {
        $this->container['current_settings_hash'] = $current_settings_hash;

        return $this;
    }

    /**
     * Gets modification_id
     *
     * @return string
     */
    public function getModificationId()
    {
        return $this->container['modification_id'];
    }

    /**
     * Sets modification_id
     *
     * @param string $modification_id modification_id
     *
     * @return $this
     */
    public function setModificationId($modification_id)
    {
        $this->container['modification_id'] = $modification_id;

        return $this;
    }

    /**
     * Gets chain_modification_id
     *
     * @return string
     */
    public function getChainModificationId()
    {
        return $this->container['chain_modification_id'];
    }

    /**
     * Sets chain_modification_id
     *
     * @param string $chain_modification_id chain_modification_id
     *
     * @return $this
     */
    public function setChainModificationId($chain_modification_id)
    {
        $this->container['chain_modification_id'] = $chain_modification_id;

        return $this;
    }

    /**
     * Gets replacement_ids
     *
     * @return \TeamCityClient\Model\Items
     */
    public function getReplacementIds()
    {
        return $this->container['replacement_ids'];
    }

    /**
     * Sets replacement_ids
     *
     * @param \TeamCityClient\Model\Items $replacement_ids replacement_ids
     *
     * @return $this
     */
    public function setReplacementIds($replacement_ids)
    {
        $this->container['replacement_ids'] = $replacement_ids;

        return $this;
    }

    /**
     * Gets related
     *
     * @return \TeamCityClient\Model\Related
     */
    public function getRelated()
    {
        return $this->container['related'];
    }

    /**
     * Sets related
     *
     * @param \TeamCityClient\Model\Related $related related
     *
     * @return $this
     */
    public function setRelated($related)
    {
        $this->container['related'] = $related;

        return $this;
    }

    /**
     * Gets triggering_options
     *
     * @return \TeamCityClient\Model\BuildTriggeringOptions
     */
    public function getTriggeringOptions()
    {
        return $this->container['triggering_options'];
    }

    /**
     * Sets triggering_options
     *
     * @param \TeamCityClient\Model\BuildTriggeringOptions $triggering_options triggering_options
     *
     * @return $this
     */
    public function setTriggeringOptions($triggering_options)
    {
        $this->container['triggering_options'] = $triggering_options;

        return $this;
    }

    /**
     * Gets used_by_other_builds
     *
     * @return bool
     */
    public function getUsedByOtherBuilds()
    {
        return $this->container['used_by_other_builds'];
    }

    /**
     * Sets used_by_other_builds
     *
     * @param bool $used_by_other_builds used_by_other_builds
     *
     * @return $this
     */
    public function setUsedByOtherBuilds($used_by_other_builds)
    {
        $this->container['used_by_other_builds'] = $used_by_other_builds;

        return $this;
    }

    /**
     * Gets status_change_comment
     *
     * @return \TeamCityClient\Model\Comment
     */
    public function getStatusChangeComment()
    {
        return $this->container['status_change_comment'];
    }

    /**
     * Sets status_change_comment
     *
     * @param \TeamCityClient\Model\Comment $status_change_comment status_change_comment
     *
     * @return $this
     */
    public function setStatusChangeComment($status_change_comment)
    {
        $this->container['status_change_comment'] = $status_change_comment;

        return $this;
    }

    /**
     * Gets locator
     *
     * @return string
     */
    public function getLocator()
    {
        return $this->container['locator'];
    }

    /**
     * Sets locator
     *
     * @param string $locator locator
     *
     * @return $this
     */
    public function setLocator($locator)
    {
        $this->container['locator'] = $locator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


