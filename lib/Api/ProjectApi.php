<?php
/**
 * ProjectApi
 * PHP version 5
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TeamCityClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TeamCityClient\ApiException;
use TeamCityClient\Configuration;
use TeamCityClient\HeaderSelector;
use TeamCityClient\ObjectSerializer;

/**
 * ProjectApi Class Doc Comment
 *
 * @category Class
 * @package  TeamCityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation add
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function add($project_locator, $body = null, $fields = null)
    {
        list($response) = $this->addWithHttpInfo($project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation addWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function addWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = 'object';
        $request = $this->addRequest($project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAsync($project_locator, $body = null, $fields = null)
    {
        return $this->addAsyncWithHttpInfo($project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAsyncWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = 'object';
        $request = $this->addRequest($project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'add'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addRequest($project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling add'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBuildType
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildType
     */
    public function createBuildType($project_locator, $body = null, $fields = null)
    {
        list($response) = $this->createBuildTypeWithHttpInfo($project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation createBuildTypeWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildType, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBuildTypeWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->createBuildTypeRequest($project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBuildTypeAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildTypeAsync($project_locator, $body = null, $fields = null)
    {
        return $this->createBuildTypeAsyncWithHttpInfo($project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBuildTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildTypeAsyncWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->createBuildTypeRequest($project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBuildType'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBuildTypeRequest($project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling createBuildType'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/buildTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBuildTypeTemplate
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildType
     */
    public function createBuildTypeTemplate($project_locator, $body = null, $fields = null)
    {
        list($response) = $this->createBuildTypeTemplateWithHttpInfo($project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation createBuildTypeTemplateWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildType, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBuildTypeTemplateWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->createBuildTypeTemplateRequest($project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBuildTypeTemplateAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildTypeTemplateAsync($project_locator, $body = null, $fields = null)
    {
        return $this->createBuildTypeTemplateAsyncWithHttpInfo($project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBuildTypeTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildTypeTemplateAsyncWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->createBuildTypeTemplateRequest($project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBuildTypeTemplate'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\NewBuildTypeDescription $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createBuildTypeTemplateRequest($project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling createBuildTypeTemplate'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProject
     *
     * @param  \TeamCityClient\Model\NewProjectDescription $body body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Project
     */
    public function createProject($body = null)
    {
        list($response) = $this->createProjectWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createProjectWithHttpInfo
     *
     * @param  \TeamCityClient\Model\NewProjectDescription $body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProjectWithHttpInfo($body = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->createProjectRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProjectAsync
     *
     * 
     *
     * @param  \TeamCityClient\Model\NewProjectDescription $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectAsync($body = null)
    {
        return $this->createProjectAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  \TeamCityClient\Model\NewProjectDescription $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectAsyncWithHttpInfo($body = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->createProjectRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProject'
     *
     * @param  \TeamCityClient\Model\NewProjectDescription $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProjectRequest($body = null)
    {

        $resourcePath = '/app/rest/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSecureToken
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $body body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function createSecureToken($project_locator, $body = null)
    {
        list($response) = $this->createSecureTokenWithHttpInfo($project_locator, $body);
        return $response;
    }

    /**
     * Operation createSecureTokenWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSecureTokenWithHttpInfo($project_locator, $body = null)
    {
        $returnType = 'string';
        $request = $this->createSecureTokenRequest($project_locator, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSecureTokenAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSecureTokenAsync($project_locator, $body = null)
    {
        return $this->createSecureTokenAsyncWithHttpInfo($project_locator, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSecureTokenAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSecureTokenAsyncWithHttpInfo($project_locator, $body = null)
    {
        $returnType = 'string';
        $request = $this->createSecureTokenRequest($project_locator, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSecureToken'
     *
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSecureTokenRequest($project_locator, $body = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling createSecureToken'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/secure/tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation delete
     *
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function delete($feature_locator, $project_locator)
    {
        $this->deleteWithHttpInfo($feature_locator, $project_locator);
    }

    /**
     * Operation deleteWithHttpInfo
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWithHttpInfo($feature_locator, $project_locator)
    {
        $returnType = '';
        $request = $this->deleteRequest($feature_locator, $project_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAsync
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsync($feature_locator, $project_locator)
    {
        return $this->deleteAsyncWithHttpInfo($feature_locator, $project_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncWithHttpInfo($feature_locator, $project_locator)
    {
        $returnType = '';
        $request = $this->deleteRequest($feature_locator, $project_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delete'
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRequest($feature_locator, $project_locator)
    {
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling delete'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling delete'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllParameters
     *
     * @param  string $project_locator project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAllParameters($project_locator)
    {
        $this->deleteAllParametersWithHttpInfo($project_locator);
    }

    /**
     * Operation deleteAllParametersWithHttpInfo
     *
     * @param  string $project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllParametersWithHttpInfo($project_locator)
    {
        $returnType = '';
        $request = $this->deleteAllParametersRequest($project_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllParametersAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllParametersAsync($project_locator)
    {
        return $this->deleteAllParametersAsyncWithHttpInfo($project_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllParametersAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllParametersAsyncWithHttpInfo($project_locator)
    {
        $returnType = '';
        $request = $this->deleteAllParametersRequest($project_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllParameters'
     *
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAllParametersRequest($project_locator)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling deleteAllParameters'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllParameters_0
     *
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAllParameters_0($feature_locator, $project_locator, $fields = null)
    {
        $this->deleteAllParameters_0WithHttpInfo($feature_locator, $project_locator, $fields);
    }

    /**
     * Operation deleteAllParameters_0WithHttpInfo
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllParameters_0WithHttpInfo($feature_locator, $project_locator, $fields = null)
    {
        $returnType = '';
        $request = $this->deleteAllParameters_0Request($feature_locator, $project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllParameters_0Async
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllParameters_0Async($feature_locator, $project_locator, $fields = null)
    {
        return $this->deleteAllParameters_0AsyncWithHttpInfo($feature_locator, $project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllParameters_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllParameters_0AsyncWithHttpInfo($feature_locator, $project_locator, $fields = null)
    {
        $returnType = '';
        $request = $this->deleteAllParameters_0Request($feature_locator, $project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllParameters_0'
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAllParameters_0Request($feature_locator, $project_locator, $fields = null)
    {
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling deleteAllParameters_0'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling deleteAllParameters_0'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteParameter
     *
     * @param  string $name name (required)
     * @param  string $project_locator project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteParameter($name, $project_locator)
    {
        $this->deleteParameterWithHttpInfo($name, $project_locator);
    }

    /**
     * Operation deleteParameterWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteParameterWithHttpInfo($name, $project_locator)
    {
        $returnType = '';
        $request = $this->deleteParameterRequest($name, $project_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteParameterAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParameterAsync($name, $project_locator)
    {
        return $this->deleteParameterAsyncWithHttpInfo($name, $project_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteParameterAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParameterAsyncWithHttpInfo($name, $project_locator)
    {
        $returnType = '';
        $request = $this->deleteParameterRequest($name, $project_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteParameter'
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteParameterRequest($name, $project_locator)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteParameter'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling deleteParameter'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteParameter_0
     *
     * @param  string $name name (required)
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteParameter_0($name, $feature_locator, $project_locator, $fields = null)
    {
        $this->deleteParameter_0WithHttpInfo($name, $feature_locator, $project_locator, $fields);
    }

    /**
     * Operation deleteParameter_0WithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteParameter_0WithHttpInfo($name, $feature_locator, $project_locator, $fields = null)
    {
        $returnType = '';
        $request = $this->deleteParameter_0Request($name, $feature_locator, $project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteParameter_0Async
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParameter_0Async($name, $feature_locator, $project_locator, $fields = null)
    {
        return $this->deleteParameter_0AsyncWithHttpInfo($name, $feature_locator, $project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteParameter_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParameter_0AsyncWithHttpInfo($name, $feature_locator, $project_locator, $fields = null)
    {
        $returnType = '';
        $request = $this->deleteParameter_0Request($name, $feature_locator, $project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteParameter_0'
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteParameter_0Request($name, $feature_locator, $project_locator, $fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteParameter_0'
            );
        }
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling deleteParameter_0'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling deleteParameter_0'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProject
     *
     * @param  string $project_locator project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProject($project_locator)
    {
        $this->deleteProjectWithHttpInfo($project_locator);
    }

    /**
     * Operation deleteProjectWithHttpInfo
     *
     * @param  string $project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectWithHttpInfo($project_locator)
    {
        $returnType = '';
        $request = $this->deleteProjectRequest($project_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAsync($project_locator)
    {
        return $this->deleteProjectAsyncWithHttpInfo($project_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAsyncWithHttpInfo($project_locator)
    {
        $returnType = '';
        $request = $this->deleteProjectRequest($project_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProject'
     *
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProjectRequest($project_locator)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling deleteProject'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProjectAgentPools
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $agent_pool_locator agent_pool_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProjectAgentPools($project_locator, $agent_pool_locator)
    {
        $this->deleteProjectAgentPoolsWithHttpInfo($project_locator, $agent_pool_locator);
    }

    /**
     * Operation deleteProjectAgentPoolsWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $agent_pool_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectAgentPoolsWithHttpInfo($project_locator, $agent_pool_locator)
    {
        $returnType = '';
        $request = $this->deleteProjectAgentPoolsRequest($project_locator, $agent_pool_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectAgentPoolsAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $agent_pool_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAgentPoolsAsync($project_locator, $agent_pool_locator)
    {
        return $this->deleteProjectAgentPoolsAsyncWithHttpInfo($project_locator, $agent_pool_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProjectAgentPoolsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $agent_pool_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAgentPoolsAsyncWithHttpInfo($project_locator, $agent_pool_locator)
    {
        $returnType = '';
        $request = $this->deleteProjectAgentPoolsRequest($project_locator, $agent_pool_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProjectAgentPools'
     *
     * @param  string $project_locator (required)
     * @param  string $agent_pool_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProjectAgentPoolsRequest($project_locator, $agent_pool_locator)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling deleteProjectAgentPools'
            );
        }
        // verify the required parameter 'agent_pool_locator' is set
        if ($agent_pool_locator === null || (is_array($agent_pool_locator) && count($agent_pool_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent_pool_locator when calling deleteProjectAgentPools'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($agent_pool_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'agentPoolLocator' . '}',
                ObjectSerializer::toPathValue($agent_pool_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation get
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function get($project_locator, $locator = null, $fields = null)
    {
        list($response) = $this->getWithHttpInfo($project_locator, $locator, $fields);
        return $response;
    }

    /**
     * Operation getWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWithHttpInfo($project_locator, $locator = null, $fields = null)
    {
        $returnType = 'object';
        $request = $this->getRequest($project_locator, $locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAsync($project_locator, $locator = null, $fields = null)
    {
        return $this->getAsyncWithHttpInfo($project_locator, $locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAsyncWithHttpInfo($project_locator, $locator = null, $fields = null)
    {
        $returnType = 'object';
        $request = $this->getRequest($project_locator, $locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'get'
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRequest($project_locator, $locator = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling get'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBranches
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Branches
     */
    public function getBranches($project_locator, $locator = null, $fields = null)
    {
        list($response) = $this->getBranchesWithHttpInfo($project_locator, $locator, $fields);
        return $response;
    }

    /**
     * Operation getBranchesWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Branches, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBranchesWithHttpInfo($project_locator, $locator = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Branches';
        $request = $this->getBranchesRequest($project_locator, $locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Branches',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBranchesAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBranchesAsync($project_locator, $locator = null, $fields = null)
    {
        return $this->getBranchesAsyncWithHttpInfo($project_locator, $locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBranchesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBranchesAsyncWithHttpInfo($project_locator, $locator = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Branches';
        $request = $this->getBranchesRequest($project_locator, $locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBranches'
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBranchesRequest($project_locator, $locator = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getBranches'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/branches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBuildTypesOrder
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $field field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildTypes
     */
    public function getBuildTypesOrder($project_locator, $field)
    {
        list($response) = $this->getBuildTypesOrderWithHttpInfo($project_locator, $field);
        return $response;
    }

    /**
     * Operation getBuildTypesOrderWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBuildTypesOrderWithHttpInfo($project_locator, $field)
    {
        $returnType = '\TeamCityClient\Model\BuildTypes';
        $request = $this->getBuildTypesOrderRequest($project_locator, $field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildTypes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBuildTypesOrderAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBuildTypesOrderAsync($project_locator, $field)
    {
        return $this->getBuildTypesOrderAsyncWithHttpInfo($project_locator, $field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBuildTypesOrderAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBuildTypesOrderAsyncWithHttpInfo($project_locator, $field)
    {
        $returnType = '\TeamCityClient\Model\BuildTypes';
        $request = $this->getBuildTypesOrderRequest($project_locator, $field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBuildTypesOrder'
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBuildTypesOrderRequest($project_locator, $field)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getBuildTypesOrder'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling getBuildTypesOrder'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/order/buildTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDefaultTemplate
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildType
     */
    public function getDefaultTemplate($project_locator, $fields = null)
    {
        list($response) = $this->getDefaultTemplateWithHttpInfo($project_locator, $fields);
        return $response;
    }

    /**
     * Operation getDefaultTemplateWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildType, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDefaultTemplateWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->getDefaultTemplateRequest($project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDefaultTemplateAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultTemplateAsync($project_locator, $fields = null)
    {
        return $this->getDefaultTemplateAsyncWithHttpInfo($project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDefaultTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultTemplateAsyncWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->getDefaultTemplateRequest($project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDefaultTemplate'
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDefaultTemplateRequest($project_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getDefaultTemplate'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/defaultTemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExampleNewProjectDescription
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $id id (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\NewProjectDescription
     */
    public function getExampleNewProjectDescription($project_locator, $id = null)
    {
        list($response) = $this->getExampleNewProjectDescriptionWithHttpInfo($project_locator, $id);
        return $response;
    }

    /**
     * Operation getExampleNewProjectDescriptionWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $id (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\NewProjectDescription, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExampleNewProjectDescriptionWithHttpInfo($project_locator, $id = null)
    {
        $returnType = '\TeamCityClient\Model\NewProjectDescription';
        $request = $this->getExampleNewProjectDescriptionRequest($project_locator, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\NewProjectDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExampleNewProjectDescriptionAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExampleNewProjectDescriptionAsync($project_locator, $id = null)
    {
        return $this->getExampleNewProjectDescriptionAsyncWithHttpInfo($project_locator, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExampleNewProjectDescriptionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExampleNewProjectDescriptionAsyncWithHttpInfo($project_locator, $id = null)
    {
        $returnType = '\TeamCityClient\Model\NewProjectDescription';
        $request = $this->getExampleNewProjectDescriptionRequest($project_locator, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExampleNewProjectDescription'
     *
     * @param  string $project_locator (required)
     * @param  string $id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExampleNewProjectDescriptionRequest($project_locator, $id = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getExampleNewProjectDescription'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/example/newProjectDescription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExampleNewProjectDescriptionCompatibilityVersion1
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $id id (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\NewProjectDescription
     */
    public function getExampleNewProjectDescriptionCompatibilityVersion1($project_locator, $id = null)
    {
        list($response) = $this->getExampleNewProjectDescriptionCompatibilityVersion1WithHttpInfo($project_locator, $id);
        return $response;
    }

    /**
     * Operation getExampleNewProjectDescriptionCompatibilityVersion1WithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $id (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\NewProjectDescription, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExampleNewProjectDescriptionCompatibilityVersion1WithHttpInfo($project_locator, $id = null)
    {
        $returnType = '\TeamCityClient\Model\NewProjectDescription';
        $request = $this->getExampleNewProjectDescriptionCompatibilityVersion1Request($project_locator, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\NewProjectDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExampleNewProjectDescriptionCompatibilityVersion1Async
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExampleNewProjectDescriptionCompatibilityVersion1Async($project_locator, $id = null)
    {
        return $this->getExampleNewProjectDescriptionCompatibilityVersion1AsyncWithHttpInfo($project_locator, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExampleNewProjectDescriptionCompatibilityVersion1AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExampleNewProjectDescriptionCompatibilityVersion1AsyncWithHttpInfo($project_locator, $id = null)
    {
        $returnType = '\TeamCityClient\Model\NewProjectDescription';
        $request = $this->getExampleNewProjectDescriptionCompatibilityVersion1Request($project_locator, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExampleNewProjectDescriptionCompatibilityVersion1'
     *
     * @param  string $project_locator (required)
     * @param  string $id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExampleNewProjectDescriptionCompatibilityVersion1Request($project_locator, $id = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getExampleNewProjectDescriptionCompatibilityVersion1'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/newProjectDescription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameter
     *
     * @param  string $name name (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Property
     */
    public function getParameter($name, $project_locator, $fields = null)
    {
        list($response) = $this->getParameterWithHttpInfo($name, $project_locator, $fields);
        return $response;
    }

    /**
     * Operation getParameterWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParameterWithHttpInfo($name, $project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->getParameterRequest($name, $project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParameterAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterAsync($name, $project_locator, $fields = null)
    {
        return $this->getParameterAsyncWithHttpInfo($name, $project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParameterAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterAsyncWithHttpInfo($name, $project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->getParameterRequest($name, $project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameter'
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParameterRequest($name, $project_locator, $fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getParameter'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getParameter'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameterType
     *
     * @param  string $name name (required)
     * @param  string $project_locator project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Type
     */
    public function getParameterType($name, $project_locator)
    {
        list($response) = $this->getParameterTypeWithHttpInfo($name, $project_locator);
        return $response;
    }

    /**
     * Operation getParameterTypeWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Type, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParameterTypeWithHttpInfo($name, $project_locator)
    {
        $returnType = '\TeamCityClient\Model\Type';
        $request = $this->getParameterTypeRequest($name, $project_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Type',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParameterTypeAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterTypeAsync($name, $project_locator)
    {
        return $this->getParameterTypeAsyncWithHttpInfo($name, $project_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParameterTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterTypeAsyncWithHttpInfo($name, $project_locator)
    {
        $returnType = '\TeamCityClient\Model\Type';
        $request = $this->getParameterTypeRequest($name, $project_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameterType'
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParameterTypeRequest($name, $project_locator)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getParameterType'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getParameterType'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters/{name}/type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameterTypeRawValue
     *
     * @param  string $name name (required)
     * @param  string $project_locator project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getParameterTypeRawValue($name, $project_locator)
    {
        list($response) = $this->getParameterTypeRawValueWithHttpInfo($name, $project_locator);
        return $response;
    }

    /**
     * Operation getParameterTypeRawValueWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParameterTypeRawValueWithHttpInfo($name, $project_locator)
    {
        $returnType = 'string';
        $request = $this->getParameterTypeRawValueRequest($name, $project_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParameterTypeRawValueAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterTypeRawValueAsync($name, $project_locator)
    {
        return $this->getParameterTypeRawValueAsyncWithHttpInfo($name, $project_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParameterTypeRawValueAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterTypeRawValueAsyncWithHttpInfo($name, $project_locator)
    {
        $returnType = 'string';
        $request = $this->getParameterTypeRawValueRequest($name, $project_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameterTypeRawValue'
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParameterTypeRawValueRequest($name, $project_locator)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getParameterTypeRawValue'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getParameterTypeRawValue'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameterValueLong
     *
     * @param  string $name name (required)
     * @param  string $project_locator project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getParameterValueLong($name, $project_locator)
    {
        list($response) = $this->getParameterValueLongWithHttpInfo($name, $project_locator);
        return $response;
    }

    /**
     * Operation getParameterValueLongWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParameterValueLongWithHttpInfo($name, $project_locator)
    {
        $returnType = 'string';
        $request = $this->getParameterValueLongRequest($name, $project_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParameterValueLongAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterValueLongAsync($name, $project_locator)
    {
        return $this->getParameterValueLongAsyncWithHttpInfo($name, $project_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParameterValueLongAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterValueLongAsyncWithHttpInfo($name, $project_locator)
    {
        $returnType = 'string';
        $request = $this->getParameterValueLongRequest($name, $project_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameterValueLong'
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParameterValueLongRequest($name, $project_locator)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getParameterValueLong'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getParameterValueLong'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters/{name}/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameterValueLong_0
     *
     * @param  string $name name (required)
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getParameterValueLong_0($name, $feature_locator, $project_locator, $fields = null)
    {
        list($response) = $this->getParameterValueLong_0WithHttpInfo($name, $feature_locator, $project_locator, $fields);
        return $response;
    }

    /**
     * Operation getParameterValueLong_0WithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParameterValueLong_0WithHttpInfo($name, $feature_locator, $project_locator, $fields = null)
    {
        $returnType = 'string';
        $request = $this->getParameterValueLong_0Request($name, $feature_locator, $project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParameterValueLong_0Async
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterValueLong_0Async($name, $feature_locator, $project_locator, $fields = null)
    {
        return $this->getParameterValueLong_0AsyncWithHttpInfo($name, $feature_locator, $project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParameterValueLong_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameterValueLong_0AsyncWithHttpInfo($name, $feature_locator, $project_locator, $fields = null)
    {
        $returnType = 'string';
        $request = $this->getParameterValueLong_0Request($name, $feature_locator, $project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameterValueLong_0'
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParameterValueLong_0Request($name, $feature_locator, $project_locator, $fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getParameterValueLong_0'
            );
        }
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling getParameterValueLong_0'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getParameterValueLong_0'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties/{name}/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameter_0
     *
     * @param  string $name name (required)
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     * @param  string $fields2 fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Property
     */
    public function getParameter_0($name, $feature_locator, $project_locator, $fields = null, $fields2 = null)
    {
        list($response) = $this->getParameter_0WithHttpInfo($name, $feature_locator, $project_locator, $fields, $fields2);
        return $response;
    }

    /**
     * Operation getParameter_0WithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParameter_0WithHttpInfo($name, $feature_locator, $project_locator, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->getParameter_0Request($name, $feature_locator, $project_locator, $fields, $fields2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParameter_0Async
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameter_0Async($name, $feature_locator, $project_locator, $fields = null, $fields2 = null)
    {
        return $this->getParameter_0AsyncWithHttpInfo($name, $feature_locator, $project_locator, $fields, $fields2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParameter_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameter_0AsyncWithHttpInfo($name, $feature_locator, $project_locator, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->getParameter_0Request($name, $feature_locator, $project_locator, $fields, $fields2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameter_0'
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParameter_0Request($name, $feature_locator, $project_locator, $fields = null, $fields2 = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getParameter_0'
            );
        }
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling getParameter_0'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getParameter_0'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($fields2 !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields2);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameters
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Properties
     */
    public function getParameters($project_locator, $locator = null, $fields = null)
    {
        list($response) = $this->getParametersWithHttpInfo($project_locator, $locator, $fields);
        return $response;
    }

    /**
     * Operation getParametersWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Properties, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParametersWithHttpInfo($project_locator, $locator = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Properties';
        $request = $this->getParametersRequest($project_locator, $locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Properties',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParametersAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParametersAsync($project_locator, $locator = null, $fields = null)
    {
        return $this->getParametersAsyncWithHttpInfo($project_locator, $locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParametersAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParametersAsyncWithHttpInfo($project_locator, $locator = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Properties';
        $request = $this->getParametersRequest($project_locator, $locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameters'
     *
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParametersRequest($project_locator, $locator = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getParameters'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParameters_0
     *
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     * @param  string $fields2 fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Properties
     */
    public function getParameters_0($feature_locator, $project_locator, $locator = null, $fields = null, $fields2 = null)
    {
        list($response) = $this->getParameters_0WithHttpInfo($feature_locator, $project_locator, $locator, $fields, $fields2);
        return $response;
    }

    /**
     * Operation getParameters_0WithHttpInfo
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Properties, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParameters_0WithHttpInfo($feature_locator, $project_locator, $locator = null, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Properties';
        $request = $this->getParameters_0Request($feature_locator, $project_locator, $locator, $fields, $fields2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Properties',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParameters_0Async
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameters_0Async($feature_locator, $project_locator, $locator = null, $fields = null, $fields2 = null)
    {
        return $this->getParameters_0AsyncWithHttpInfo($feature_locator, $project_locator, $locator, $fields, $fields2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParameters_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParameters_0AsyncWithHttpInfo($feature_locator, $project_locator, $locator = null, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Properties';
        $request = $this->getParameters_0Request($feature_locator, $project_locator, $locator, $fields, $fields2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParameters_0'
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParameters_0Request($feature_locator, $project_locator, $locator = null, $fields = null, $fields2 = null)
    {
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling getParameters_0'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getParameters_0'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($fields2 !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields2);
        }

        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParentProject
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Project
     */
    public function getParentProject($project_locator, $fields = null)
    {
        list($response) = $this->getParentProjectWithHttpInfo($project_locator, $fields);
        return $response;
    }

    /**
     * Operation getParentProjectWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParentProjectWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->getParentProjectRequest($project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParentProjectAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParentProjectAsync($project_locator, $fields = null)
    {
        return $this->getParentProjectAsyncWithHttpInfo($project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParentProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParentProjectAsyncWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->getParentProjectRequest($project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParentProject'
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParentProjectRequest($project_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getParentProject'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parentProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectAgentPools
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\AgentPools
     */
    public function getProjectAgentPools($project_locator, $fields = null)
    {
        list($response) = $this->getProjectAgentPoolsWithHttpInfo($project_locator, $fields);
        return $response;
    }

    /**
     * Operation getProjectAgentPoolsWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\AgentPools, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectAgentPoolsWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\AgentPools';
        $request = $this->getProjectAgentPoolsRequest($project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\AgentPools',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectAgentPoolsAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAgentPoolsAsync($project_locator, $fields = null)
    {
        return $this->getProjectAgentPoolsAsyncWithHttpInfo($project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectAgentPoolsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAgentPoolsAsyncWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\AgentPools';
        $request = $this->getProjectAgentPoolsRequest($project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectAgentPools'
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProjectAgentPoolsRequest($project_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getProjectAgentPools'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/agentPools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectsOrder
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $field field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Projects
     */
    public function getProjectsOrder($project_locator, $field)
    {
        list($response) = $this->getProjectsOrderWithHttpInfo($project_locator, $field);
        return $response;
    }

    /**
     * Operation getProjectsOrderWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Projects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectsOrderWithHttpInfo($project_locator, $field)
    {
        $returnType = '\TeamCityClient\Model\Projects';
        $request = $this->getProjectsOrderRequest($project_locator, $field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Projects',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectsOrderAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectsOrderAsync($project_locator, $field)
    {
        return $this->getProjectsOrderAsyncWithHttpInfo($project_locator, $field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProjectsOrderAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectsOrderAsyncWithHttpInfo($project_locator, $field)
    {
        $returnType = '\TeamCityClient\Model\Projects';
        $request = $this->getProjectsOrderRequest($project_locator, $field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectsOrder'
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProjectsOrderRequest($project_locator, $field)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getProjectsOrder'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling getProjectsOrder'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/order/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSecureValue
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $token token (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getSecureValue($project_locator, $token)
    {
        list($response) = $this->getSecureValueWithHttpInfo($project_locator, $token);
        return $response;
    }

    /**
     * Operation getSecureValueWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $token (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSecureValueWithHttpInfo($project_locator, $token)
    {
        $returnType = 'string';
        $request = $this->getSecureValueRequest($project_locator, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSecureValueAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecureValueAsync($project_locator, $token)
    {
        return $this->getSecureValueAsyncWithHttpInfo($project_locator, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSecureValueAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecureValueAsyncWithHttpInfo($project_locator, $token)
    {
        $returnType = 'string';
        $request = $this->getSecureValueRequest($project_locator, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSecureValue'
     *
     * @param  string $project_locator (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSecureValueRequest($project_locator, $token)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getSecureValue'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getSecureValue'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/secure/values/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSettingsFile
     *
     * @param  string $project_locator project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getSettingsFile($project_locator)
    {
        list($response) = $this->getSettingsFileWithHttpInfo($project_locator);
        return $response;
    }

    /**
     * Operation getSettingsFileWithHttpInfo
     *
     * @param  string $project_locator (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSettingsFileWithHttpInfo($project_locator)
    {
        $returnType = 'string';
        $request = $this->getSettingsFileRequest($project_locator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSettingsFileAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSettingsFileAsync($project_locator)
    {
        return $this->getSettingsFileAsyncWithHttpInfo($project_locator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSettingsFileAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSettingsFileAsyncWithHttpInfo($project_locator)
    {
        $returnType = 'string';
        $request = $this->getSettingsFileRequest($project_locator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSettingsFile'
     *
     * @param  string $project_locator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSettingsFileRequest($project_locator)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getSettingsFile'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/settingsFile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSingle
     *
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getSingle($feature_locator, $project_locator, $fields = null)
    {
        list($response) = $this->getSingleWithHttpInfo($feature_locator, $project_locator, $fields);
        return $response;
    }

    /**
     * Operation getSingleWithHttpInfo
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSingleWithHttpInfo($feature_locator, $project_locator, $fields = null)
    {
        $returnType = 'object';
        $request = $this->getSingleRequest($feature_locator, $project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSingleAsync
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSingleAsync($feature_locator, $project_locator, $fields = null)
    {
        return $this->getSingleAsyncWithHttpInfo($feature_locator, $project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSingleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSingleAsyncWithHttpInfo($feature_locator, $project_locator, $fields = null)
    {
        $returnType = 'object';
        $request = $this->getSingleRequest($feature_locator, $project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSingle'
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSingleRequest($feature_locator, $project_locator, $fields = null)
    {
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling getSingle'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling getSingle'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reloadSettingsFile
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Project
     */
    public function reloadSettingsFile($project_locator, $fields = null)
    {
        list($response) = $this->reloadSettingsFileWithHttpInfo($project_locator, $fields);
        return $response;
    }

    /**
     * Operation reloadSettingsFileWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function reloadSettingsFileWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->reloadSettingsFileRequest($project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reloadSettingsFileAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reloadSettingsFileAsync($project_locator, $fields = null)
    {
        return $this->reloadSettingsFileAsyncWithHttpInfo($project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reloadSettingsFileAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reloadSettingsFileAsyncWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->reloadSettingsFileRequest($project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reloadSettingsFile'
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reloadSettingsFileRequest($project_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling reloadSettingsFile'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/latest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeDefaultTemplate
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeDefaultTemplate($project_locator, $fields = null)
    {
        $this->removeDefaultTemplateWithHttpInfo($project_locator, $fields);
    }

    /**
     * Operation removeDefaultTemplateWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeDefaultTemplateWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '';
        $request = $this->removeDefaultTemplateRequest($project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeDefaultTemplateAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeDefaultTemplateAsync($project_locator, $fields = null)
    {
        return $this->removeDefaultTemplateAsyncWithHttpInfo($project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeDefaultTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeDefaultTemplateAsyncWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '';
        $request = $this->removeDefaultTemplateRequest($project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeDefaultTemplate'
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeDefaultTemplateRequest($project_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling removeDefaultTemplate'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/defaultTemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replace
     *
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function replace($feature_locator, $project_locator, $body = null, $fields = null)
    {
        list($response) = $this->replaceWithHttpInfo($feature_locator, $project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation replaceWithHttpInfo
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceWithHttpInfo($feature_locator, $project_locator, $body = null, $fields = null)
    {
        $returnType = 'object';
        $request = $this->replaceRequest($feature_locator, $project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceAsync
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceAsync($feature_locator, $project_locator, $body = null, $fields = null)
    {
        return $this->replaceAsyncWithHttpInfo($feature_locator, $project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceAsyncWithHttpInfo($feature_locator, $project_locator, $body = null, $fields = null)
    {
        $returnType = 'object';
        $request = $this->replaceRequest($feature_locator, $project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replace'
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeature $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceRequest($feature_locator, $project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling replace'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling replace'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceAll
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeatures $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function replaceAll($project_locator, $body = null, $fields = null)
    {
        list($response) = $this->replaceAllWithHttpInfo($project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation replaceAllWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeatures $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceAllWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = 'object';
        $request = $this->replaceAllRequest($project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceAllAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeatures $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceAllAsync($project_locator, $body = null, $fields = null)
    {
        return $this->replaceAllAsyncWithHttpInfo($project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceAllAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeatures $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceAllAsyncWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = 'object';
        $request = $this->replaceAllRequest($project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceAll'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\ProjectFeatures $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceAllRequest($project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling replaceAll'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveBuildFieldWithProject
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $bt_locator bt_locator (required)
     * @param  string $build_locator build_locator (required)
     * @param  string $field field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function serveBuildFieldWithProject($project_locator, $bt_locator, $build_locator, $field)
    {
        list($response) = $this->serveBuildFieldWithProjectWithHttpInfo($project_locator, $bt_locator, $build_locator, $field);
        return $response;
    }

    /**
     * Operation serveBuildFieldWithProjectWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $build_locator (required)
     * @param  string $field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveBuildFieldWithProjectWithHttpInfo($project_locator, $bt_locator, $build_locator, $field)
    {
        $returnType = 'string';
        $request = $this->serveBuildFieldWithProjectRequest($project_locator, $bt_locator, $build_locator, $field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveBuildFieldWithProjectAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $build_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildFieldWithProjectAsync($project_locator, $bt_locator, $build_locator, $field)
    {
        return $this->serveBuildFieldWithProjectAsyncWithHttpInfo($project_locator, $bt_locator, $build_locator, $field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveBuildFieldWithProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $build_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildFieldWithProjectAsyncWithHttpInfo($project_locator, $bt_locator, $build_locator, $field)
    {
        $returnType = 'string';
        $request = $this->serveBuildFieldWithProjectRequest($project_locator, $bt_locator, $build_locator, $field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveBuildFieldWithProject'
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $build_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveBuildFieldWithProjectRequest($project_locator, $bt_locator, $build_locator, $field)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveBuildFieldWithProject'
            );
        }
        // verify the required parameter 'bt_locator' is set
        if ($bt_locator === null || (is_array($bt_locator) && count($bt_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bt_locator when calling serveBuildFieldWithProject'
            );
        }
        // verify the required parameter 'build_locator' is set
        if ($build_locator === null || (is_array($build_locator) && count($build_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $build_locator when calling serveBuildFieldWithProject'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling serveBuildFieldWithProject'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($bt_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'btLocator' . '}',
                ObjectSerializer::toPathValue($bt_locator),
                $resourcePath
            );
        }
        // path params
        if ($build_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'buildLocator' . '}',
                ObjectSerializer::toPathValue($build_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveBuildType
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $bt_locator bt_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildType
     */
    public function serveBuildType($project_locator, $bt_locator, $fields = null)
    {
        list($response) = $this->serveBuildTypeWithHttpInfo($project_locator, $bt_locator, $fields);
        return $response;
    }

    /**
     * Operation serveBuildTypeWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildType, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveBuildTypeWithHttpInfo($project_locator, $bt_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->serveBuildTypeRequest($project_locator, $bt_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveBuildTypeAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildTypeAsync($project_locator, $bt_locator, $fields = null)
    {
        return $this->serveBuildTypeAsyncWithHttpInfo($project_locator, $bt_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveBuildTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildTypeAsyncWithHttpInfo($project_locator, $bt_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->serveBuildTypeRequest($project_locator, $bt_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveBuildType'
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveBuildTypeRequest($project_locator, $bt_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveBuildType'
            );
        }
        // verify the required parameter 'bt_locator' is set
        if ($bt_locator === null || (is_array($bt_locator) && count($bt_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bt_locator when calling serveBuildType'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/buildTypes/{btLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($bt_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'btLocator' . '}',
                ObjectSerializer::toPathValue($bt_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveBuildTypeFieldWithProject
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $bt_locator bt_locator (required)
     * @param  string $field field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function serveBuildTypeFieldWithProject($project_locator, $bt_locator, $field)
    {
        list($response) = $this->serveBuildTypeFieldWithProjectWithHttpInfo($project_locator, $bt_locator, $field);
        return $response;
    }

    /**
     * Operation serveBuildTypeFieldWithProjectWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveBuildTypeFieldWithProjectWithHttpInfo($project_locator, $bt_locator, $field)
    {
        $returnType = 'string';
        $request = $this->serveBuildTypeFieldWithProjectRequest($project_locator, $bt_locator, $field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveBuildTypeFieldWithProjectAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildTypeFieldWithProjectAsync($project_locator, $bt_locator, $field)
    {
        return $this->serveBuildTypeFieldWithProjectAsyncWithHttpInfo($project_locator, $bt_locator, $field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveBuildTypeFieldWithProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildTypeFieldWithProjectAsyncWithHttpInfo($project_locator, $bt_locator, $field)
    {
        $returnType = 'string';
        $request = $this->serveBuildTypeFieldWithProjectRequest($project_locator, $bt_locator, $field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveBuildTypeFieldWithProject'
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveBuildTypeFieldWithProjectRequest($project_locator, $bt_locator, $field)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveBuildTypeFieldWithProject'
            );
        }
        // verify the required parameter 'bt_locator' is set
        if ($bt_locator === null || (is_array($bt_locator) && count($bt_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bt_locator when calling serveBuildTypeFieldWithProject'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling serveBuildTypeFieldWithProject'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($bt_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'btLocator' . '}',
                ObjectSerializer::toPathValue($bt_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveBuildTypeTemplates
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $bt_locator bt_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildType
     */
    public function serveBuildTypeTemplates($project_locator, $bt_locator, $fields = null)
    {
        list($response) = $this->serveBuildTypeTemplatesWithHttpInfo($project_locator, $bt_locator, $fields);
        return $response;
    }

    /**
     * Operation serveBuildTypeTemplatesWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildType, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveBuildTypeTemplatesWithHttpInfo($project_locator, $bt_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->serveBuildTypeTemplatesRequest($project_locator, $bt_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveBuildTypeTemplatesAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildTypeTemplatesAsync($project_locator, $bt_locator, $fields = null)
    {
        return $this->serveBuildTypeTemplatesAsyncWithHttpInfo($project_locator, $bt_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveBuildTypeTemplatesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildTypeTemplatesAsyncWithHttpInfo($project_locator, $bt_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->serveBuildTypeTemplatesRequest($project_locator, $bt_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveBuildTypeTemplates'
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveBuildTypeTemplatesRequest($project_locator, $bt_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveBuildTypeTemplates'
            );
        }
        // verify the required parameter 'bt_locator' is set
        if ($bt_locator === null || (is_array($bt_locator) && count($bt_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bt_locator when calling serveBuildTypeTemplates'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/templates/{btLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($bt_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'btLocator' . '}',
                ObjectSerializer::toPathValue($bt_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveBuildTypesInProject
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildTypes
     */
    public function serveBuildTypesInProject($project_locator, $fields = null)
    {
        list($response) = $this->serveBuildTypesInProjectWithHttpInfo($project_locator, $fields);
        return $response;
    }

    /**
     * Operation serveBuildTypesInProjectWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveBuildTypesInProjectWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildTypes';
        $request = $this->serveBuildTypesInProjectRequest($project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildTypes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveBuildTypesInProjectAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildTypesInProjectAsync($project_locator, $fields = null)
    {
        return $this->serveBuildTypesInProjectAsyncWithHttpInfo($project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveBuildTypesInProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildTypesInProjectAsyncWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildTypes';
        $request = $this->serveBuildTypesInProjectRequest($project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveBuildTypesInProject'
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveBuildTypesInProjectRequest($project_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveBuildTypesInProject'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/buildTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveBuildWithProject
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $bt_locator bt_locator (required)
     * @param  string $build_locator build_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Build
     */
    public function serveBuildWithProject($project_locator, $bt_locator, $build_locator, $fields = null)
    {
        list($response) = $this->serveBuildWithProjectWithHttpInfo($project_locator, $bt_locator, $build_locator, $fields);
        return $response;
    }

    /**
     * Operation serveBuildWithProjectWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $build_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Build, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveBuildWithProjectWithHttpInfo($project_locator, $bt_locator, $build_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Build';
        $request = $this->serveBuildWithProjectRequest($project_locator, $bt_locator, $build_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Build',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveBuildWithProjectAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $build_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildWithProjectAsync($project_locator, $bt_locator, $build_locator, $fields = null)
    {
        return $this->serveBuildWithProjectAsyncWithHttpInfo($project_locator, $bt_locator, $build_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveBuildWithProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $build_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildWithProjectAsyncWithHttpInfo($project_locator, $bt_locator, $build_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Build';
        $request = $this->serveBuildWithProjectRequest($project_locator, $bt_locator, $build_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveBuildWithProject'
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $build_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveBuildWithProjectRequest($project_locator, $bt_locator, $build_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveBuildWithProject'
            );
        }
        // verify the required parameter 'bt_locator' is set
        if ($bt_locator === null || (is_array($bt_locator) && count($bt_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bt_locator when calling serveBuildWithProject'
            );
        }
        // verify the required parameter 'build_locator' is set
        if ($build_locator === null || (is_array($build_locator) && count($build_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $build_locator when calling serveBuildWithProject'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($bt_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'btLocator' . '}',
                ObjectSerializer::toPathValue($bt_locator),
                $resourcePath
            );
        }
        // path params
        if ($build_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'buildLocator' . '}',
                ObjectSerializer::toPathValue($build_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveBuilds
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $bt_locator bt_locator (required)
     * @param  string $status status (optional)
     * @param  string $triggered_by_user triggered_by_user (optional)
     * @param  bool $include_personal include_personal (optional)
     * @param  bool $include_canceled include_canceled (optional)
     * @param  bool $only_pinned only_pinned (optional)
     * @param  string[] $tag tag (optional)
     * @param  string $agent_name agent_name (optional)
     * @param  string $since_build since_build (optional)
     * @param  string $since_date since_date (optional)
     * @param  int $start start (optional)
     * @param  int $count count (optional)
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Builds
     */
    public function serveBuilds($project_locator, $bt_locator, $status = null, $triggered_by_user = null, $include_personal = null, $include_canceled = null, $only_pinned = null, $tag = null, $agent_name = null, $since_build = null, $since_date = null, $start = null, $count = null, $locator = null, $fields = null)
    {
        list($response) = $this->serveBuildsWithHttpInfo($project_locator, $bt_locator, $status, $triggered_by_user, $include_personal, $include_canceled, $only_pinned, $tag, $agent_name, $since_build, $since_date, $start, $count, $locator, $fields);
        return $response;
    }

    /**
     * Operation serveBuildsWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $status (optional)
     * @param  string $triggered_by_user (optional)
     * @param  bool $include_personal (optional)
     * @param  bool $include_canceled (optional)
     * @param  bool $only_pinned (optional)
     * @param  string[] $tag (optional)
     * @param  string $agent_name (optional)
     * @param  string $since_build (optional)
     * @param  string $since_date (optional)
     * @param  int $start (optional)
     * @param  int $count (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Builds, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveBuildsWithHttpInfo($project_locator, $bt_locator, $status = null, $triggered_by_user = null, $include_personal = null, $include_canceled = null, $only_pinned = null, $tag = null, $agent_name = null, $since_build = null, $since_date = null, $start = null, $count = null, $locator = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Builds';
        $request = $this->serveBuildsRequest($project_locator, $bt_locator, $status, $triggered_by_user, $include_personal, $include_canceled, $only_pinned, $tag, $agent_name, $since_build, $since_date, $start, $count, $locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Builds',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveBuildsAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $status (optional)
     * @param  string $triggered_by_user (optional)
     * @param  bool $include_personal (optional)
     * @param  bool $include_canceled (optional)
     * @param  bool $only_pinned (optional)
     * @param  string[] $tag (optional)
     * @param  string $agent_name (optional)
     * @param  string $since_build (optional)
     * @param  string $since_date (optional)
     * @param  int $start (optional)
     * @param  int $count (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildsAsync($project_locator, $bt_locator, $status = null, $triggered_by_user = null, $include_personal = null, $include_canceled = null, $only_pinned = null, $tag = null, $agent_name = null, $since_build = null, $since_date = null, $start = null, $count = null, $locator = null, $fields = null)
    {
        return $this->serveBuildsAsyncWithHttpInfo($project_locator, $bt_locator, $status, $triggered_by_user, $include_personal, $include_canceled, $only_pinned, $tag, $agent_name, $since_build, $since_date, $start, $count, $locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveBuildsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $status (optional)
     * @param  string $triggered_by_user (optional)
     * @param  bool $include_personal (optional)
     * @param  bool $include_canceled (optional)
     * @param  bool $only_pinned (optional)
     * @param  string[] $tag (optional)
     * @param  string $agent_name (optional)
     * @param  string $since_build (optional)
     * @param  string $since_date (optional)
     * @param  int $start (optional)
     * @param  int $count (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveBuildsAsyncWithHttpInfo($project_locator, $bt_locator, $status = null, $triggered_by_user = null, $include_personal = null, $include_canceled = null, $only_pinned = null, $tag = null, $agent_name = null, $since_build = null, $since_date = null, $start = null, $count = null, $locator = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Builds';
        $request = $this->serveBuildsRequest($project_locator, $bt_locator, $status, $triggered_by_user, $include_personal, $include_canceled, $only_pinned, $tag, $agent_name, $since_build, $since_date, $start, $count, $locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveBuilds'
     *
     * @param  string $project_locator (required)
     * @param  string $bt_locator (required)
     * @param  string $status (optional)
     * @param  string $triggered_by_user (optional)
     * @param  bool $include_personal (optional)
     * @param  bool $include_canceled (optional)
     * @param  bool $only_pinned (optional)
     * @param  string[] $tag (optional)
     * @param  string $agent_name (optional)
     * @param  string $since_build (optional)
     * @param  string $since_date (optional)
     * @param  int $start (optional)
     * @param  int $count (optional)
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveBuildsRequest($project_locator, $bt_locator, $status = null, $triggered_by_user = null, $include_personal = null, $include_canceled = null, $only_pinned = null, $tag = null, $agent_name = null, $since_build = null, $since_date = null, $start = null, $count = null, $locator = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveBuilds'
            );
        }
        // verify the required parameter 'bt_locator' is set
        if ($bt_locator === null || (is_array($bt_locator) && count($bt_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bt_locator when calling serveBuilds'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($triggered_by_user !== null) {
            $queryParams['triggeredByUser'] = ObjectSerializer::toQueryValue($triggered_by_user);
        }
        // query params
        if ($include_personal !== null) {
            $queryParams['includePersonal'] = ObjectSerializer::toQueryValue($include_personal);
        }
        // query params
        if ($include_canceled !== null) {
            $queryParams['includeCanceled'] = ObjectSerializer::toQueryValue($include_canceled);
        }
        // query params
        if ($only_pinned !== null) {
            $queryParams['onlyPinned'] = ObjectSerializer::toQueryValue($only_pinned);
        }
        // query params
        if (is_array($tag)) {
            $queryParams['tag'] = $tag;
        } else
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag);
        }
        // query params
        if ($agent_name !== null) {
            $queryParams['agentName'] = ObjectSerializer::toQueryValue($agent_name);
        }
        // query params
        if ($since_build !== null) {
            $queryParams['sinceBuild'] = ObjectSerializer::toQueryValue($since_build);
        }
        // query params
        if ($since_date !== null) {
            $queryParams['sinceDate'] = ObjectSerializer::toQueryValue($since_date);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($bt_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'btLocator' . '}',
                ObjectSerializer::toPathValue($bt_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveProject
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Project
     */
    public function serveProject($project_locator, $fields = null)
    {
        list($response) = $this->serveProjectWithHttpInfo($project_locator, $fields);
        return $response;
    }

    /**
     * Operation serveProjectWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveProjectWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->serveProjectRequest($project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveProjectAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveProjectAsync($project_locator, $fields = null)
    {
        return $this->serveProjectAsyncWithHttpInfo($project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveProjectAsyncWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->serveProjectRequest($project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveProject'
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveProjectRequest($project_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveProject'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveProjectField
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $field field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function serveProjectField($project_locator, $field)
    {
        list($response) = $this->serveProjectFieldWithHttpInfo($project_locator, $field);
        return $response;
    }

    /**
     * Operation serveProjectFieldWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveProjectFieldWithHttpInfo($project_locator, $field)
    {
        $returnType = 'string';
        $request = $this->serveProjectFieldRequest($project_locator, $field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveProjectFieldAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveProjectFieldAsync($project_locator, $field)
    {
        return $this->serveProjectFieldAsyncWithHttpInfo($project_locator, $field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveProjectFieldAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveProjectFieldAsyncWithHttpInfo($project_locator, $field)
    {
        $returnType = 'string';
        $request = $this->serveProjectFieldRequest($project_locator, $field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveProjectField'
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveProjectFieldRequest($project_locator, $field)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveProjectField'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling serveProjectField'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveProjects
     *
     * @param  string $locator locator (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Projects
     */
    public function serveProjects($locator = null, $fields = null)
    {
        list($response) = $this->serveProjectsWithHttpInfo($locator, $fields);
        return $response;
    }

    /**
     * Operation serveProjectsWithHttpInfo
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Projects, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveProjectsWithHttpInfo($locator = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Projects';
        $request = $this->serveProjectsRequest($locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Projects',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveProjectsAsync
     *
     * 
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveProjectsAsync($locator = null, $fields = null)
    {
        return $this->serveProjectsAsyncWithHttpInfo($locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveProjectsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveProjectsAsyncWithHttpInfo($locator = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Projects';
        $request = $this->serveProjectsRequest($locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveProjects'
     *
     * @param  string $locator (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveProjectsRequest($locator = null, $fields = null)
    {

        $resourcePath = '/app/rest/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locator !== null) {
            $queryParams['locator'] = ObjectSerializer::toQueryValue($locator);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serveTemplatesInProject
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildTypes
     */
    public function serveTemplatesInProject($project_locator, $fields = null)
    {
        list($response) = $this->serveTemplatesInProjectWithHttpInfo($project_locator, $fields);
        return $response;
    }

    /**
     * Operation serveTemplatesInProjectWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function serveTemplatesInProjectWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildTypes';
        $request = $this->serveTemplatesInProjectRequest($project_locator, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildTypes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serveTemplatesInProjectAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveTemplatesInProjectAsync($project_locator, $fields = null)
    {
        return $this->serveTemplatesInProjectAsyncWithHttpInfo($project_locator, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serveTemplatesInProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serveTemplatesInProjectAsyncWithHttpInfo($project_locator, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildTypes';
        $request = $this->serveTemplatesInProjectRequest($project_locator, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serveTemplatesInProject'
     *
     * @param  string $project_locator (required)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serveTemplatesInProjectRequest($project_locator, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling serveTemplatesInProject'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setBuildTypesOrder
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $field field (required)
     * @param  \TeamCityClient\Model\BuildTypes $body body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildTypes
     */
    public function setBuildTypesOrder($project_locator, $field, $body = null)
    {
        list($response) = $this->setBuildTypesOrderWithHttpInfo($project_locator, $field, $body);
        return $response;
    }

    /**
     * Operation setBuildTypesOrderWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  \TeamCityClient\Model\BuildTypes $body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildTypes, HTTP status code, HTTP response headers (array of strings)
     */
    public function setBuildTypesOrderWithHttpInfo($project_locator, $field, $body = null)
    {
        $returnType = '\TeamCityClient\Model\BuildTypes';
        $request = $this->setBuildTypesOrderRequest($project_locator, $field, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildTypes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setBuildTypesOrderAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  \TeamCityClient\Model\BuildTypes $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setBuildTypesOrderAsync($project_locator, $field, $body = null)
    {
        return $this->setBuildTypesOrderAsyncWithHttpInfo($project_locator, $field, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setBuildTypesOrderAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  \TeamCityClient\Model\BuildTypes $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setBuildTypesOrderAsyncWithHttpInfo($project_locator, $field, $body = null)
    {
        $returnType = '\TeamCityClient\Model\BuildTypes';
        $request = $this->setBuildTypesOrderRequest($project_locator, $field, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setBuildTypesOrder'
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  \TeamCityClient\Model\BuildTypes $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setBuildTypesOrderRequest($project_locator, $field, $body = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setBuildTypesOrder'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling setBuildTypesOrder'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/order/buildTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setDefaultTemplate
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\BuildType $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\BuildType
     */
    public function setDefaultTemplate($project_locator, $body = null, $fields = null)
    {
        list($response) = $this->setDefaultTemplateWithHttpInfo($project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation setDefaultTemplateWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\BuildType $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\BuildType, HTTP status code, HTTP response headers (array of strings)
     */
    public function setDefaultTemplateWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->setDefaultTemplateRequest($project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\BuildType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setDefaultTemplateAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\BuildType $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultTemplateAsync($project_locator, $body = null, $fields = null)
    {
        return $this->setDefaultTemplateAsyncWithHttpInfo($project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setDefaultTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\BuildType $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultTemplateAsyncWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\BuildType';
        $request = $this->setDefaultTemplateRequest($project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setDefaultTemplate'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\BuildType $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setDefaultTemplateRequest($project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setDefaultTemplate'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/defaultTemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameter
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\Property $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Property
     */
    public function setParameter($project_locator, $body = null, $fields = null)
    {
        list($response) = $this->setParameterWithHttpInfo($project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation setParameterWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParameterWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->setParameterRequest($project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParameterAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterAsync($project_locator, $body = null, $fields = null)
    {
        return $this->setParameterAsyncWithHttpInfo($project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParameterAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterAsyncWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->setParameterRequest($project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameter'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParameterRequest($project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameter'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameterType
     *
     * @param  string $name name (required)
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\Type $body body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Type
     */
    public function setParameterType($name, $project_locator, $body = null)
    {
        list($response) = $this->setParameterTypeWithHttpInfo($name, $project_locator, $body);
        return $response;
    }

    /**
     * Operation setParameterTypeWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Type $body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Type, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParameterTypeWithHttpInfo($name, $project_locator, $body = null)
    {
        $returnType = '\TeamCityClient\Model\Type';
        $request = $this->setParameterTypeRequest($name, $project_locator, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Type',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParameterTypeAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Type $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterTypeAsync($name, $project_locator, $body = null)
    {
        return $this->setParameterTypeAsyncWithHttpInfo($name, $project_locator, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParameterTypeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Type $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterTypeAsyncWithHttpInfo($name, $project_locator, $body = null)
    {
        $returnType = '\TeamCityClient\Model\Type';
        $request = $this->setParameterTypeRequest($name, $project_locator, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameterType'
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Type $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParameterTypeRequest($name, $project_locator, $body = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling setParameterType'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameterType'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters/{name}/type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameterTypeRawValue
     *
     * @param  string $name name (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $body body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function setParameterTypeRawValue($name, $project_locator, $body = null)
    {
        list($response) = $this->setParameterTypeRawValueWithHttpInfo($name, $project_locator, $body);
        return $response;
    }

    /**
     * Operation setParameterTypeRawValueWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParameterTypeRawValueWithHttpInfo($name, $project_locator, $body = null)
    {
        $returnType = 'string';
        $request = $this->setParameterTypeRawValueRequest($name, $project_locator, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParameterTypeRawValueAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterTypeRawValueAsync($name, $project_locator, $body = null)
    {
        return $this->setParameterTypeRawValueAsyncWithHttpInfo($name, $project_locator, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParameterTypeRawValueAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterTypeRawValueAsyncWithHttpInfo($name, $project_locator, $body = null)
    {
        $returnType = 'string';
        $request = $this->setParameterTypeRawValueRequest($name, $project_locator, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameterTypeRawValue'
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParameterTypeRawValueRequest($name, $project_locator, $body = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling setParameterTypeRawValue'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameterTypeRawValue'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameterValueLong
     *
     * @param  string $name name (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $body body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function setParameterValueLong($name, $project_locator, $body = null)
    {
        list($response) = $this->setParameterValueLongWithHttpInfo($name, $project_locator, $body);
        return $response;
    }

    /**
     * Operation setParameterValueLongWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParameterValueLongWithHttpInfo($name, $project_locator, $body = null)
    {
        $returnType = 'string';
        $request = $this->setParameterValueLongRequest($name, $project_locator, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParameterValueLongAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterValueLongAsync($name, $project_locator, $body = null)
    {
        return $this->setParameterValueLongAsyncWithHttpInfo($name, $project_locator, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParameterValueLongAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterValueLongAsyncWithHttpInfo($name, $project_locator, $body = null)
    {
        $returnType = 'string';
        $request = $this->setParameterValueLongRequest($name, $project_locator, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameterValueLong'
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParameterValueLongRequest($name, $project_locator, $body = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling setParameterValueLong'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameterValueLong'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters/{name}/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameterValueLong_0
     *
     * @param  string $name name (required)
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  string $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function setParameterValueLong_0($name, $feature_locator, $project_locator, $body = null, $fields = null)
    {
        list($response) = $this->setParameterValueLong_0WithHttpInfo($name, $feature_locator, $project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation setParameterValueLong_0WithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParameterValueLong_0WithHttpInfo($name, $feature_locator, $project_locator, $body = null, $fields = null)
    {
        $returnType = 'string';
        $request = $this->setParameterValueLong_0Request($name, $feature_locator, $project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParameterValueLong_0Async
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterValueLong_0Async($name, $feature_locator, $project_locator, $body = null, $fields = null)
    {
        return $this->setParameterValueLong_0AsyncWithHttpInfo($name, $feature_locator, $project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParameterValueLong_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameterValueLong_0AsyncWithHttpInfo($name, $feature_locator, $project_locator, $body = null, $fields = null)
    {
        $returnType = 'string';
        $request = $this->setParameterValueLong_0Request($name, $feature_locator, $project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameterValueLong_0'
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  string $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParameterValueLong_0Request($name, $feature_locator, $project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling setParameterValueLong_0'
            );
        }
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling setParameterValueLong_0'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameterValueLong_0'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties/{name}/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameter_0
     *
     * @param  string $name name (required)
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\Property $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Property
     */
    public function setParameter_0($name, $project_locator, $body = null, $fields = null)
    {
        list($response) = $this->setParameter_0WithHttpInfo($name, $project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation setParameter_0WithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParameter_0WithHttpInfo($name, $project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->setParameter_0Request($name, $project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParameter_0Async
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameter_0Async($name, $project_locator, $body = null, $fields = null)
    {
        return $this->setParameter_0AsyncWithHttpInfo($name, $project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParameter_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameter_0AsyncWithHttpInfo($name, $project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->setParameter_0Request($name, $project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameter_0'
     *
     * @param  string $name (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParameter_0Request($name, $project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling setParameter_0'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameter_0'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameter_1
     *
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\Property $body body (optional)
     * @param  string $fields fields (optional)
     * @param  string $fields2 fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Property
     */
    public function setParameter_1($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        list($response) = $this->setParameter_1WithHttpInfo($feature_locator, $project_locator, $body, $fields, $fields2);
        return $response;
    }

    /**
     * Operation setParameter_1WithHttpInfo
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParameter_1WithHttpInfo($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->setParameter_1Request($feature_locator, $project_locator, $body, $fields, $fields2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParameter_1Async
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameter_1Async($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        return $this->setParameter_1AsyncWithHttpInfo($feature_locator, $project_locator, $body, $fields, $fields2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParameter_1AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameter_1AsyncWithHttpInfo($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->setParameter_1Request($feature_locator, $project_locator, $body, $fields, $fields2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameter_1'
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParameter_1Request($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling setParameter_1'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameter_1'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($fields2 !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields2);
        }

        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameter_2
     *
     * @param  string $name name (required)
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\Property $body body (optional)
     * @param  string $fields fields (optional)
     * @param  string $fields2 fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Property
     */
    public function setParameter_2($name, $feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        list($response) = $this->setParameter_2WithHttpInfo($name, $feature_locator, $project_locator, $body, $fields, $fields2);
        return $response;
    }

    /**
     * Operation setParameter_2WithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParameter_2WithHttpInfo($name, $feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->setParameter_2Request($name, $feature_locator, $project_locator, $body, $fields, $fields2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParameter_2Async
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameter_2Async($name, $feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        return $this->setParameter_2AsyncWithHttpInfo($name, $feature_locator, $project_locator, $body, $fields, $fields2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParameter_2AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameter_2AsyncWithHttpInfo($name, $feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Property';
        $request = $this->setParameter_2Request($name, $feature_locator, $project_locator, $body, $fields, $fields2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameter_2'
     *
     * @param  string $name (required)
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Property $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParameter_2Request($name, $feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling setParameter_2'
            );
        }
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling setParameter_2'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameter_2'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($fields2 !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields2);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameters
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Properties
     */
    public function setParameters($project_locator, $body = null, $fields = null)
    {
        list($response) = $this->setParametersWithHttpInfo($project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation setParametersWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Properties, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParametersWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Properties';
        $request = $this->setParametersRequest($project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Properties',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParametersAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParametersAsync($project_locator, $body = null, $fields = null)
    {
        return $this->setParametersAsyncWithHttpInfo($project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParametersAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParametersAsyncWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Properties';
        $request = $this->setParametersRequest($project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameters'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParametersRequest($project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameters'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parameters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParameters_0
     *
     * @param  string $feature_locator feature_locator (required)
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body body (optional)
     * @param  string $fields fields (optional)
     * @param  string $fields2 fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Properties
     */
    public function setParameters_0($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        list($response) = $this->setParameters_0WithHttpInfo($feature_locator, $project_locator, $body, $fields, $fields2);
        return $response;
    }

    /**
     * Operation setParameters_0WithHttpInfo
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Properties, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParameters_0WithHttpInfo($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Properties';
        $request = $this->setParameters_0Request($feature_locator, $project_locator, $body, $fields, $fields2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Properties',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParameters_0Async
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameters_0Async($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        return $this->setParameters_0AsyncWithHttpInfo($feature_locator, $project_locator, $body, $fields, $fields2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParameters_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParameters_0AsyncWithHttpInfo($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        $returnType = '\TeamCityClient\Model\Properties';
        $request = $this->setParameters_0Request($feature_locator, $project_locator, $body, $fields, $fields2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParameters_0'
     *
     * @param  string $feature_locator (required)
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Properties $body (optional)
     * @param  string $fields (optional)
     * @param  string $fields2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParameters_0Request($feature_locator, $project_locator, $body = null, $fields = null, $fields2 = null)
    {
        // verify the required parameter 'feature_locator' is set
        if ($feature_locator === null || (is_array($feature_locator) && count($feature_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feature_locator when calling setParameters_0'
            );
        }
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParameters_0'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($fields2 !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields2);
        }

        // path params
        if ($feature_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'featureLocator' . '}',
                ObjectSerializer::toPathValue($feature_locator),
                $resourcePath
            );
        }
        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setParentProject
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\Project $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Project
     */
    public function setParentProject($project_locator, $body = null, $fields = null)
    {
        list($response) = $this->setParentProjectWithHttpInfo($project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation setParentProjectWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Project $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function setParentProjectWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->setParentProjectRequest($project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Project',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setParentProjectAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Project $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParentProjectAsync($project_locator, $body = null, $fields = null)
    {
        return $this->setParentProjectAsyncWithHttpInfo($project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setParentProjectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Project $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setParentProjectAsyncWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\Project';
        $request = $this->setParentProjectRequest($project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setParentProject'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\Project $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setParentProjectRequest($project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setParentProject'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/parentProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setProjectAgentPools
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\AgentPools $body body (optional)
     * @param  string $fields fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\AgentPools
     */
    public function setProjectAgentPools($project_locator, $body = null, $fields = null)
    {
        list($response) = $this->setProjectAgentPoolsWithHttpInfo($project_locator, $body, $fields);
        return $response;
    }

    /**
     * Operation setProjectAgentPoolsWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\AgentPools $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\AgentPools, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProjectAgentPoolsWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\AgentPools';
        $request = $this->setProjectAgentPoolsRequest($project_locator, $body, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\AgentPools',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setProjectAgentPoolsAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\AgentPools $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectAgentPoolsAsync($project_locator, $body = null, $fields = null)
    {
        return $this->setProjectAgentPoolsAsyncWithHttpInfo($project_locator, $body, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setProjectAgentPoolsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\AgentPools $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectAgentPoolsAsyncWithHttpInfo($project_locator, $body = null, $fields = null)
    {
        $returnType = '\TeamCityClient\Model\AgentPools';
        $request = $this->setProjectAgentPoolsRequest($project_locator, $body, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setProjectAgentPools'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\AgentPools $body (optional)
     * @param  string $fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProjectAgentPoolsRequest($project_locator, $body = null, $fields = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setProjectAgentPools'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/agentPools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setProjectAgentPools_0
     *
     * @param  string $project_locator project_locator (required)
     * @param  \TeamCityClient\Model\AgentPool $body body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\AgentPool
     */
    public function setProjectAgentPools_0($project_locator, $body = null)
    {
        list($response) = $this->setProjectAgentPools_0WithHttpInfo($project_locator, $body);
        return $response;
    }

    /**
     * Operation setProjectAgentPools_0WithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\AgentPool $body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\AgentPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProjectAgentPools_0WithHttpInfo($project_locator, $body = null)
    {
        $returnType = '\TeamCityClient\Model\AgentPool';
        $request = $this->setProjectAgentPools_0Request($project_locator, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\AgentPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setProjectAgentPools_0Async
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\AgentPool $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectAgentPools_0Async($project_locator, $body = null)
    {
        return $this->setProjectAgentPools_0AsyncWithHttpInfo($project_locator, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setProjectAgentPools_0AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\AgentPool $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectAgentPools_0AsyncWithHttpInfo($project_locator, $body = null)
    {
        $returnType = '\TeamCityClient\Model\AgentPool';
        $request = $this->setProjectAgentPools_0Request($project_locator, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setProjectAgentPools_0'
     *
     * @param  string $project_locator (required)
     * @param  \TeamCityClient\Model\AgentPool $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProjectAgentPools_0Request($project_locator, $body = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setProjectAgentPools_0'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/agentPools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setProjectField
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $field field (required)
     * @param  string $body body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function setProjectField($project_locator, $field, $body = null)
    {
        list($response) = $this->setProjectFieldWithHttpInfo($project_locator, $field, $body);
        return $response;
    }

    /**
     * Operation setProjectFieldWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProjectFieldWithHttpInfo($project_locator, $field, $body = null)
    {
        $returnType = 'string';
        $request = $this->setProjectFieldRequest($project_locator, $field, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setProjectFieldAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectFieldAsync($project_locator, $field, $body = null)
    {
        return $this->setProjectFieldAsyncWithHttpInfo($project_locator, $field, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setProjectFieldAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectFieldAsyncWithHttpInfo($project_locator, $field, $body = null)
    {
        $returnType = 'string';
        $request = $this->setProjectFieldRequest($project_locator, $field, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setProjectField'
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProjectFieldRequest($project_locator, $field, $body = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setProjectField'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling setProjectField'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setProjectsOrder
     *
     * @param  string $project_locator project_locator (required)
     * @param  string $field field (required)
     * @param  \TeamCityClient\Model\Projects $body body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TeamCityClient\Model\Projects
     */
    public function setProjectsOrder($project_locator, $field, $body = null)
    {
        list($response) = $this->setProjectsOrderWithHttpInfo($project_locator, $field, $body);
        return $response;
    }

    /**
     * Operation setProjectsOrderWithHttpInfo
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  \TeamCityClient\Model\Projects $body (optional)
     *
     * @throws \TeamCityClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TeamCityClient\Model\Projects, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProjectsOrderWithHttpInfo($project_locator, $field, $body = null)
    {
        $returnType = '\TeamCityClient\Model\Projects';
        $request = $this->setProjectsOrderRequest($project_locator, $field, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TeamCityClient\Model\Projects',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setProjectsOrderAsync
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  \TeamCityClient\Model\Projects $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectsOrderAsync($project_locator, $field, $body = null)
    {
        return $this->setProjectsOrderAsyncWithHttpInfo($project_locator, $field, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setProjectsOrderAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  \TeamCityClient\Model\Projects $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProjectsOrderAsyncWithHttpInfo($project_locator, $field, $body = null)
    {
        $returnType = '\TeamCityClient\Model\Projects';
        $request = $this->setProjectsOrderRequest($project_locator, $field, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setProjectsOrder'
     *
     * @param  string $project_locator (required)
     * @param  string $field (required)
     * @param  \TeamCityClient\Model\Projects $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProjectsOrderRequest($project_locator, $field, $body = null)
    {
        // verify the required parameter 'project_locator' is set
        if ($project_locator === null || (is_array($project_locator) && count($project_locator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_locator when calling setProjectsOrder'
            );
        }
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling setProjectsOrder'
            );
        }

        $resourcePath = '/app/rest/projects/{projectLocator}/order/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_locator !== null) {
            $resourcePath = str_replace(
                '{' . 'projectLocator' . '}',
                ObjectSerializer::toPathValue($project_locator),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
